[
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "AsyncGenerator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "AsyncGenerator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "AsyncGenerator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "context",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "sqlalchemy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "pool",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "insert",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "update",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "delete",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "desc",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "event",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "event",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "func",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "insert",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "update",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "delete",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "desc",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "func",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "insert",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "postgresql",
        "importPath": "sqlalchemy.dialects",
        "description": "sqlalchemy.dialects",
        "isExtraImport": true,
        "detail": "sqlalchemy.dialects",
        "documentation": {}
    },
    {
        "label": "asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncio",
        "description": "asyncio",
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "fileConfig",
        "importPath": "logging.config",
        "description": "logging.config",
        "isExtraImport": true,
        "detail": "logging.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "src.config",
        "description": "src.config",
        "isExtraImport": true,
        "detail": "src.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "src.config",
        "description": "src.config",
        "isExtraImport": true,
        "detail": "src.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "src.config",
        "description": "src.config",
        "isExtraImport": true,
        "detail": "src.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "src.config",
        "description": "src.config",
        "isExtraImport": true,
        "detail": "src.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "src.config",
        "description": "src.config",
        "isExtraImport": true,
        "detail": "src.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "src.config",
        "description": "src.config",
        "isExtraImport": true,
        "detail": "src.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "src.config",
        "description": "src.config",
        "isExtraImport": true,
        "detail": "src.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "src.config",
        "description": "src.config",
        "isExtraImport": true,
        "detail": "src.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "src.config",
        "description": "src.config",
        "isExtraImport": true,
        "detail": "src.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "src.config",
        "description": "src.config",
        "isExtraImport": true,
        "detail": "src.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "src.config",
        "description": "src.config",
        "isExtraImport": true,
        "detail": "src.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "src.config",
        "description": "src.config",
        "isExtraImport": true,
        "detail": "src.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "src.config",
        "description": "src.config",
        "isExtraImport": true,
        "detail": "src.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "src.config",
        "description": "src.config",
        "isExtraImport": true,
        "detail": "src.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "src.config",
        "description": "src.config",
        "isExtraImport": true,
        "detail": "src.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "src.config",
        "description": "src.config",
        "isExtraImport": true,
        "detail": "src.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "src.config",
        "description": "src.config",
        "isExtraImport": true,
        "detail": "src.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "src.config",
        "description": "src.config",
        "isExtraImport": true,
        "detail": "src.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "src.config",
        "description": "src.config",
        "isExtraImport": true,
        "detail": "src.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "src.config",
        "description": "src.config",
        "isExtraImport": true,
        "detail": "src.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "src.config",
        "description": "src.config",
        "isExtraImport": true,
        "detail": "src.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "src.config",
        "description": "src.config",
        "isExtraImport": true,
        "detail": "src.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "src.config",
        "description": "src.config",
        "isExtraImport": true,
        "detail": "src.config",
        "documentation": {}
    },
    {
        "label": "Connection",
        "importPath": "sqlalchemy.engine",
        "description": "sqlalchemy.engine",
        "isExtraImport": true,
        "detail": "sqlalchemy.engine",
        "documentation": {}
    },
    {
        "label": "async_engine_from_config",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "create_async_engine",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "create_async_engine",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "create_async_engine",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "Album",
        "importPath": "src.albums.models",
        "description": "src.albums.models",
        "isExtraImport": true,
        "detail": "src.albums.models",
        "documentation": {}
    },
    {
        "label": "album_track_association",
        "importPath": "src.albums.models",
        "description": "src.albums.models",
        "isExtraImport": true,
        "detail": "src.albums.models",
        "documentation": {}
    },
    {
        "label": "artist_profile_album_association",
        "importPath": "src.albums.models",
        "description": "src.albums.models",
        "isExtraImport": true,
        "detail": "src.albums.models",
        "documentation": {}
    },
    {
        "label": "Album",
        "importPath": "src.albums.models",
        "description": "src.albums.models",
        "isExtraImport": true,
        "detail": "src.albums.models",
        "documentation": {}
    },
    {
        "label": "Album",
        "importPath": "src.albums.models",
        "description": "src.albums.models",
        "isExtraImport": true,
        "detail": "src.albums.models",
        "documentation": {}
    },
    {
        "label": "artist_profile_album_association",
        "importPath": "src.albums.models",
        "description": "src.albums.models",
        "isExtraImport": true,
        "detail": "src.albums.models",
        "documentation": {}
    },
    {
        "label": "album_track_association",
        "importPath": "src.albums.models",
        "description": "src.albums.models",
        "isExtraImport": true,
        "detail": "src.albums.models",
        "documentation": {}
    },
    {
        "label": "Album",
        "importPath": "src.albums.models",
        "description": "src.albums.models",
        "isExtraImport": true,
        "detail": "src.albums.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "src.auth.models",
        "description": "src.auth.models",
        "isExtraImport": true,
        "detail": "src.auth.models",
        "documentation": {}
    },
    {
        "label": "ProducerProfile",
        "importPath": "src.auth.models",
        "description": "src.auth.models",
        "isExtraImport": true,
        "detail": "src.auth.models",
        "documentation": {}
    },
    {
        "label": "ArtistProfile",
        "importPath": "src.auth.models",
        "description": "src.auth.models",
        "isExtraImport": true,
        "detail": "src.auth.models",
        "documentation": {}
    },
    {
        "label": "Role",
        "importPath": "src.auth.models",
        "description": "src.auth.models",
        "isExtraImport": true,
        "detail": "src.auth.models",
        "documentation": {}
    },
    {
        "label": "user_to_roles_association",
        "importPath": "src.auth.models",
        "description": "src.auth.models",
        "isExtraImport": true,
        "detail": "src.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "src.auth.models",
        "description": "src.auth.models",
        "isExtraImport": true,
        "detail": "src.auth.models",
        "documentation": {}
    },
    {
        "label": "ProducerProfile",
        "importPath": "src.auth.models",
        "description": "src.auth.models",
        "isExtraImport": true,
        "detail": "src.auth.models",
        "documentation": {}
    },
    {
        "label": "ArtistProfile",
        "importPath": "src.auth.models",
        "description": "src.auth.models",
        "isExtraImport": true,
        "detail": "src.auth.models",
        "documentation": {}
    },
    {
        "label": "Role",
        "importPath": "src.auth.models",
        "description": "src.auth.models",
        "isExtraImport": true,
        "detail": "src.auth.models",
        "documentation": {}
    },
    {
        "label": "user_to_roles_association",
        "importPath": "src.auth.models",
        "description": "src.auth.models",
        "isExtraImport": true,
        "detail": "src.auth.models",
        "documentation": {}
    },
    {
        "label": "artist_tags_association",
        "importPath": "src.auth.models",
        "description": "src.auth.models",
        "isExtraImport": true,
        "detail": "src.auth.models",
        "documentation": {}
    },
    {
        "label": "producer_tags_association",
        "importPath": "src.auth.models",
        "description": "src.auth.models",
        "isExtraImport": true,
        "detail": "src.auth.models",
        "documentation": {}
    },
    {
        "label": "listener_tags_association",
        "importPath": "src.auth.models",
        "description": "src.auth.models",
        "isExtraImport": true,
        "detail": "src.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "src.auth.models",
        "description": "src.auth.models",
        "isExtraImport": true,
        "detail": "src.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "src.auth.models",
        "description": "src.auth.models",
        "isExtraImport": true,
        "detail": "src.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "src.auth.models",
        "description": "src.auth.models",
        "isExtraImport": true,
        "detail": "src.auth.models",
        "documentation": {}
    },
    {
        "label": "ProducerProfile",
        "importPath": "src.auth.models",
        "description": "src.auth.models",
        "isExtraImport": true,
        "detail": "src.auth.models",
        "documentation": {}
    },
    {
        "label": "ArtistProfile",
        "importPath": "src.auth.models",
        "description": "src.auth.models",
        "isExtraImport": true,
        "detail": "src.auth.models",
        "documentation": {}
    },
    {
        "label": "Beat",
        "importPath": "src.beats.models",
        "description": "src.beats.models",
        "isExtraImport": true,
        "detail": "src.beats.models",
        "documentation": {}
    },
    {
        "label": "Beat",
        "importPath": "src.beats.models",
        "description": "src.beats.models",
        "isExtraImport": true,
        "detail": "src.beats.models",
        "documentation": {}
    },
    {
        "label": "Beat",
        "importPath": "src.beats.models",
        "description": "src.beats.models",
        "isExtraImport": true,
        "detail": "src.beats.models",
        "documentation": {}
    },
    {
        "label": "Beat",
        "importPath": "src.beats.models",
        "description": "src.beats.models",
        "isExtraImport": true,
        "detail": "src.beats.models",
        "documentation": {}
    },
    {
        "label": "BeatPack",
        "importPath": "src.beats.models",
        "description": "src.beats.models",
        "isExtraImport": true,
        "detail": "src.beats.models",
        "documentation": {}
    },
    {
        "label": "Playlist",
        "importPath": "src.beats.models",
        "description": "src.beats.models",
        "isExtraImport": true,
        "detail": "src.beats.models",
        "documentation": {}
    },
    {
        "label": "License",
        "importPath": "src.beats.models",
        "description": "src.beats.models",
        "isExtraImport": true,
        "detail": "src.beats.models",
        "documentation": {}
    },
    {
        "label": "Beat",
        "importPath": "src.beats.models",
        "description": "src.beats.models",
        "isExtraImport": true,
        "detail": "src.beats.models",
        "documentation": {}
    },
    {
        "label": "BeatPack",
        "importPath": "src.beats.models",
        "description": "src.beats.models",
        "isExtraImport": true,
        "detail": "src.beats.models",
        "documentation": {}
    },
    {
        "label": "Playlist",
        "importPath": "src.beats.models",
        "description": "src.beats.models",
        "isExtraImport": true,
        "detail": "src.beats.models",
        "documentation": {}
    },
    {
        "label": "License",
        "importPath": "src.beats.models",
        "description": "src.beats.models",
        "isExtraImport": true,
        "detail": "src.beats.models",
        "documentation": {}
    },
    {
        "label": "Beat",
        "importPath": "src.beats.models",
        "description": "src.beats.models",
        "isExtraImport": true,
        "detail": "src.beats.models",
        "documentation": {}
    },
    {
        "label": "Beat",
        "importPath": "src.beats.models",
        "description": "src.beats.models",
        "isExtraImport": true,
        "detail": "src.beats.models",
        "documentation": {}
    },
    {
        "label": "Beatpack",
        "importPath": "src.beatpacks.models",
        "description": "src.beatpacks.models",
        "isExtraImport": true,
        "detail": "src.beatpacks.models",
        "documentation": {}
    },
    {
        "label": "Beatpack",
        "importPath": "src.beatpacks.models",
        "description": "src.beatpacks.models",
        "isExtraImport": true,
        "detail": "src.beatpacks.models",
        "documentation": {}
    },
    {
        "label": "Beatpack",
        "importPath": "src.beatpacks.models",
        "description": "src.beatpacks.models",
        "isExtraImport": true,
        "detail": "src.beatpacks.models",
        "documentation": {}
    },
    {
        "label": "Beatpack",
        "importPath": "src.beatpacks.models",
        "description": "src.beatpacks.models",
        "isExtraImport": true,
        "detail": "src.beatpacks.models",
        "documentation": {}
    },
    {
        "label": "Beatpack",
        "importPath": "src.beatpacks.models",
        "description": "src.beatpacks.models",
        "isExtraImport": true,
        "detail": "src.beatpacks.models",
        "documentation": {}
    },
    {
        "label": "Tag",
        "importPath": "src.tags.models",
        "description": "src.tags.models",
        "isExtraImport": true,
        "detail": "src.tags.models",
        "documentation": {}
    },
    {
        "label": "Tag",
        "importPath": "src.tags.models",
        "description": "src.tags.models",
        "isExtraImport": true,
        "detail": "src.tags.models",
        "documentation": {}
    },
    {
        "label": "artist_tags_association",
        "importPath": "src.tags.models",
        "description": "src.tags.models",
        "isExtraImport": true,
        "detail": "src.tags.models",
        "documentation": {}
    },
    {
        "label": "producer_tags_association",
        "importPath": "src.tags.models",
        "description": "src.tags.models",
        "isExtraImport": true,
        "detail": "src.tags.models",
        "documentation": {}
    },
    {
        "label": "listener_tags_association",
        "importPath": "src.tags.models",
        "description": "src.tags.models",
        "isExtraImport": true,
        "detail": "src.tags.models",
        "documentation": {}
    },
    {
        "label": "Tag",
        "importPath": "src.tags.models",
        "description": "src.tags.models",
        "isExtraImport": true,
        "detail": "src.tags.models",
        "documentation": {}
    },
    {
        "label": "artist_tags_association",
        "importPath": "src.tags.models",
        "description": "src.tags.models",
        "isExtraImport": true,
        "detail": "src.tags.models",
        "documentation": {}
    },
    {
        "label": "producer_tags_association",
        "importPath": "src.tags.models",
        "description": "src.tags.models",
        "isExtraImport": true,
        "detail": "src.tags.models",
        "documentation": {}
    },
    {
        "label": "listener_tags_association",
        "importPath": "src.tags.models",
        "description": "src.tags.models",
        "isExtraImport": true,
        "detail": "src.tags.models",
        "documentation": {}
    },
    {
        "label": "Tag",
        "importPath": "src.tags.models",
        "description": "src.tags.models",
        "isExtraImport": true,
        "detail": "src.tags.models",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "src.database",
        "description": "src.database",
        "isExtraImport": true,
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "src.database",
        "description": "src.database",
        "isExtraImport": true,
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "src.database",
        "description": "src.database",
        "isExtraImport": true,
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "async_session_maker",
        "importPath": "src.database",
        "description": "src.database",
        "isExtraImport": true,
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "src.database",
        "description": "src.database",
        "isExtraImport": true,
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "src.database",
        "description": "src.database",
        "isExtraImport": true,
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "src.database",
        "description": "src.database",
        "isExtraImport": true,
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "src.database",
        "description": "src.database",
        "isExtraImport": true,
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "src.database",
        "description": "src.database",
        "isExtraImport": true,
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "src.database",
        "description": "src.database",
        "isExtraImport": true,
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "src.database",
        "description": "src.database",
        "isExtraImport": true,
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "src.database",
        "description": "src.database",
        "isExtraImport": true,
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "src.database",
        "description": "src.database",
        "isExtraImport": true,
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "async_session_maker",
        "importPath": "src.database",
        "description": "src.database",
        "isExtraImport": true,
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "src.database",
        "description": "src.database",
        "isExtraImport": true,
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "src.database",
        "description": "src.database",
        "isExtraImport": true,
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "engine",
        "importPath": "src.database",
        "description": "src.database",
        "isExtraImport": true,
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "async_session_maker",
        "importPath": "src.database",
        "description": "src.database",
        "isExtraImport": true,
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "get_async_session",
        "importPath": "src.database",
        "description": "src.database",
        "isExtraImport": true,
        "detail": "src.database",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "mapped_column",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "mapped_column",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "mapped_column",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "mapped_column",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "mapped_column",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "mapped_column",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "mapped_column",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "mapped_column",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "mapped_column",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "mapped_column",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "mapped_column",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "mapped_column",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "mapped_column",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "mapped_column",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "DeclarativeBase",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "mapped_column",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "DeclarativeBase",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "mapped_column",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "AlbumsRepository",
        "importPath": "src.albums.services",
        "description": "src.albums.services",
        "isExtraImport": true,
        "detail": "src.albums.services",
        "documentation": {}
    },
    {
        "label": "SAlbumBase",
        "importPath": "src.albums.schemas",
        "description": "src.albums.schemas",
        "isExtraImport": true,
        "detail": "src.albums.schemas",
        "documentation": {}
    },
    {
        "label": "SAlbum",
        "importPath": "src.albums.schemas",
        "description": "src.albums.schemas",
        "isExtraImport": true,
        "detail": "src.albums.schemas",
        "documentation": {}
    },
    {
        "label": "SAlbumCreate",
        "importPath": "src.albums.schemas",
        "description": "src.albums.schemas",
        "isExtraImport": true,
        "detail": "src.albums.schemas",
        "documentation": {}
    },
    {
        "label": "SUser",
        "importPath": "src.auth.schemas",
        "description": "src.auth.schemas",
        "isExtraImport": true,
        "detail": "src.auth.schemas",
        "documentation": {}
    },
    {
        "label": "SUser",
        "importPath": "src.auth.schemas",
        "description": "src.auth.schemas",
        "isExtraImport": true,
        "detail": "src.auth.schemas",
        "documentation": {}
    },
    {
        "label": "SUser",
        "importPath": "src.auth.schemas",
        "description": "src.auth.schemas",
        "isExtraImport": true,
        "detail": "src.auth.schemas",
        "documentation": {}
    },
    {
        "label": "SUser",
        "importPath": "src.auth.schemas",
        "description": "src.auth.schemas",
        "isExtraImport": true,
        "detail": "src.auth.schemas",
        "documentation": {}
    },
    {
        "label": "SArtist",
        "importPath": "src.auth.schemas",
        "description": "src.auth.schemas",
        "isExtraImport": true,
        "detail": "src.auth.schemas",
        "documentation": {}
    },
    {
        "label": "SProducer",
        "importPath": "src.auth.schemas",
        "description": "src.auth.schemas",
        "isExtraImport": true,
        "detail": "src.auth.schemas",
        "documentation": {}
    },
    {
        "label": "SRegisterUser",
        "importPath": "src.auth.schemas",
        "description": "src.auth.schemas",
        "isExtraImport": true,
        "detail": "src.auth.schemas",
        "documentation": {}
    },
    {
        "label": "SLoginUser",
        "importPath": "src.auth.schemas",
        "description": "src.auth.schemas",
        "isExtraImport": true,
        "detail": "src.auth.schemas",
        "documentation": {}
    },
    {
        "label": "SUserBase",
        "importPath": "src.auth.schemas",
        "description": "src.auth.schemas",
        "isExtraImport": true,
        "detail": "src.auth.schemas",
        "documentation": {}
    },
    {
        "label": "SUserUpdate",
        "importPath": "src.auth.schemas",
        "description": "src.auth.schemas",
        "isExtraImport": true,
        "detail": "src.auth.schemas",
        "documentation": {}
    },
    {
        "label": "SArtistUpdate",
        "importPath": "src.auth.schemas",
        "description": "src.auth.schemas",
        "isExtraImport": true,
        "detail": "src.auth.schemas",
        "documentation": {}
    },
    {
        "label": "SProducerUpdate",
        "importPath": "src.auth.schemas",
        "description": "src.auth.schemas",
        "isExtraImport": true,
        "detail": "src.auth.schemas",
        "documentation": {}
    },
    {
        "label": "SUser",
        "importPath": "src.auth.schemas",
        "description": "src.auth.schemas",
        "isExtraImport": true,
        "detail": "src.auth.schemas",
        "documentation": {}
    },
    {
        "label": "SUser",
        "importPath": "src.auth.schemas",
        "description": "src.auth.schemas",
        "isExtraImport": true,
        "detail": "src.auth.schemas",
        "documentation": {}
    },
    {
        "label": "SUser",
        "importPath": "src.auth.schemas",
        "description": "src.auth.schemas",
        "isExtraImport": true,
        "detail": "src.auth.schemas",
        "documentation": {}
    },
    {
        "label": "SUser",
        "importPath": "src.auth.schemas",
        "description": "src.auth.schemas",
        "isExtraImport": true,
        "detail": "src.auth.schemas",
        "documentation": {}
    },
    {
        "label": "SUser",
        "importPath": "src.auth.schemas",
        "description": "src.auth.schemas",
        "isExtraImport": true,
        "detail": "src.auth.schemas",
        "documentation": {}
    },
    {
        "label": "SUser",
        "importPath": "src.auth.schemas",
        "description": "src.auth.schemas",
        "isExtraImport": true,
        "detail": "src.auth.schemas",
        "documentation": {}
    },
    {
        "label": "SUser",
        "importPath": "src.auth.schemas",
        "description": "src.auth.schemas",
        "isExtraImport": true,
        "detail": "src.auth.schemas",
        "documentation": {}
    },
    {
        "label": "SUser",
        "importPath": "src.auth.schemas",
        "description": "src.auth.schemas",
        "isExtraImport": true,
        "detail": "src.auth.schemas",
        "documentation": {}
    },
    {
        "label": "SUser",
        "importPath": "src.auth.schemas",
        "description": "src.auth.schemas",
        "isExtraImport": true,
        "detail": "src.auth.schemas",
        "documentation": {}
    },
    {
        "label": "SUser",
        "importPath": "src.auth.schemas",
        "description": "src.auth.schemas",
        "isExtraImport": true,
        "detail": "src.auth.schemas",
        "documentation": {}
    },
    {
        "label": "SUser",
        "importPath": "src.auth.schemas",
        "description": "src.auth.schemas",
        "isExtraImport": true,
        "detail": "src.auth.schemas",
        "documentation": {}
    },
    {
        "label": "SUser",
        "importPath": "src.auth.schemas",
        "description": "src.auth.schemas",
        "isExtraImport": true,
        "detail": "src.auth.schemas",
        "documentation": {}
    },
    {
        "label": "SUser",
        "importPath": "src.auth.schemas",
        "description": "src.auth.schemas",
        "isExtraImport": true,
        "detail": "src.auth.schemas",
        "documentation": {}
    },
    {
        "label": "SUser",
        "importPath": "src.auth.schemas",
        "description": "src.auth.schemas",
        "isExtraImport": true,
        "detail": "src.auth.schemas",
        "documentation": {}
    },
    {
        "label": "SUser",
        "importPath": "src.auth.schemas",
        "description": "src.auth.schemas",
        "isExtraImport": true,
        "detail": "src.auth.schemas",
        "documentation": {}
    },
    {
        "label": "SUser",
        "importPath": "src.auth.schemas",
        "description": "src.auth.schemas",
        "isExtraImport": true,
        "detail": "src.auth.schemas",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "importPath": "src.auth.dependencies",
        "description": "src.auth.dependencies",
        "isExtraImport": true,
        "detail": "src.auth.dependencies",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "importPath": "src.auth.dependencies",
        "description": "src.auth.dependencies",
        "isExtraImport": true,
        "detail": "src.auth.dependencies",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "importPath": "src.auth.dependencies",
        "description": "src.auth.dependencies",
        "isExtraImport": true,
        "detail": "src.auth.dependencies",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "importPath": "src.auth.dependencies",
        "description": "src.auth.dependencies",
        "isExtraImport": true,
        "detail": "src.auth.dependencies",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "importPath": "src.auth.dependencies",
        "description": "src.auth.dependencies",
        "isExtraImport": true,
        "detail": "src.auth.dependencies",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "importPath": "src.auth.dependencies",
        "description": "src.auth.dependencies",
        "isExtraImport": true,
        "detail": "src.auth.dependencies",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "importPath": "src.auth.dependencies",
        "description": "src.auth.dependencies",
        "isExtraImport": true,
        "detail": "src.auth.dependencies",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "importPath": "src.auth.dependencies",
        "description": "src.auth.dependencies",
        "isExtraImport": true,
        "detail": "src.auth.dependencies",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "importPath": "src.auth.dependencies",
        "description": "src.auth.dependencies",
        "isExtraImport": true,
        "detail": "src.auth.dependencies",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "importPath": "src.auth.dependencies",
        "description": "src.auth.dependencies",
        "isExtraImport": true,
        "detail": "src.auth.dependencies",
        "documentation": {}
    },
    {
        "label": "MediaRepository",
        "importPath": "src.services",
        "description": "src.services",
        "isExtraImport": true,
        "detail": "src.services",
        "documentation": {}
    },
    {
        "label": "SQLAlchemyRepository",
        "importPath": "src.services",
        "description": "src.services",
        "isExtraImport": true,
        "detail": "src.services",
        "documentation": {}
    },
    {
        "label": "MediaRepository",
        "importPath": "src.services",
        "description": "src.services",
        "isExtraImport": true,
        "detail": "src.services",
        "documentation": {}
    },
    {
        "label": "SQLAlchemyRepository",
        "importPath": "src.services",
        "description": "src.services",
        "isExtraImport": true,
        "detail": "src.services",
        "documentation": {}
    },
    {
        "label": "SQLAlchemyRepository",
        "importPath": "src.services",
        "description": "src.services",
        "isExtraImport": true,
        "detail": "src.services",
        "documentation": {}
    },
    {
        "label": "MediaRepository",
        "importPath": "src.services",
        "description": "src.services",
        "isExtraImport": true,
        "detail": "src.services",
        "documentation": {}
    },
    {
        "label": "SQLAlchemyRepository",
        "importPath": "src.services",
        "description": "src.services",
        "isExtraImport": true,
        "detail": "src.services",
        "documentation": {}
    },
    {
        "label": "SQLAlchemyRepository",
        "importPath": "src.services",
        "description": "src.services",
        "isExtraImport": true,
        "detail": "src.services",
        "documentation": {}
    },
    {
        "label": "SQLAlchemyRepository",
        "importPath": "src.services",
        "description": "src.services",
        "isExtraImport": true,
        "detail": "src.services",
        "documentation": {}
    },
    {
        "label": "SQLAlchemyRepository",
        "importPath": "src.services",
        "description": "src.services",
        "isExtraImport": true,
        "detail": "src.services",
        "documentation": {}
    },
    {
        "label": "SQLAlchemyRepository",
        "importPath": "src.services",
        "description": "src.services",
        "isExtraImport": true,
        "detail": "src.services",
        "documentation": {}
    },
    {
        "label": "SQLAlchemyRepository",
        "importPath": "src.services",
        "description": "src.services",
        "isExtraImport": true,
        "detail": "src.services",
        "documentation": {}
    },
    {
        "label": "SQLAlchemyRepository",
        "importPath": "src.services",
        "description": "src.services",
        "isExtraImport": true,
        "detail": "src.services",
        "documentation": {}
    },
    {
        "label": "MediaRepository",
        "importPath": "src.services",
        "description": "src.services",
        "isExtraImport": true,
        "detail": "src.services",
        "documentation": {}
    },
    {
        "label": "SQLAlchemyRepository",
        "importPath": "src.services",
        "description": "src.services",
        "isExtraImport": true,
        "detail": "src.services",
        "documentation": {}
    },
    {
        "label": "SQLAlchemyRepository",
        "importPath": "src.services",
        "description": "src.services",
        "isExtraImport": true,
        "detail": "src.services",
        "documentation": {}
    },
    {
        "label": "SQLAlchemyRepository",
        "importPath": "src.services",
        "description": "src.services",
        "isExtraImport": true,
        "detail": "src.services",
        "documentation": {}
    },
    {
        "label": "SQLAlchemyRepository",
        "importPath": "src.services",
        "description": "src.services",
        "isExtraImport": true,
        "detail": "src.services",
        "documentation": {}
    },
    {
        "label": "MediaRepository",
        "importPath": "src.services",
        "description": "src.services",
        "isExtraImport": true,
        "detail": "src.services",
        "documentation": {}
    },
    {
        "label": "SQLAlchemyRepository",
        "importPath": "src.services",
        "description": "src.services",
        "isExtraImport": true,
        "detail": "src.services",
        "documentation": {}
    },
    {
        "label": "UploadFile",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "File",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "File",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "UploadFile",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "UploadFile",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "File",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "File",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "UploadFile",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "UploadFile",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "File",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "File",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "UploadFile",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "UploadFile",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "File",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "UploadFile",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "UploadFile",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "File",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "File",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "UploadFile",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "UploadFile",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "File",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "File",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "UploadFile",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "UploadFile",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "File",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "File",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "UploadFile",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "UploadFile",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "File",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "File",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "UploadFile",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "UploadFile",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "File",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "File",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "UploadFile",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "UploadFile",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "File",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "File",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "UploadFile",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "UploadFile",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "File",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "UploadFile",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "File",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "File",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "UploadFile",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "UploadFile",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "File",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FileResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "FileResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "FileResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "FileResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "FileResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "FileResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "EmailStr",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "EmailStr",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "EmailStr",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "EmailStr",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "EmailStr",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "jwt",
        "importPath": "jose",
        "description": "jose",
        "isExtraImport": true,
        "detail": "jose",
        "documentation": {}
    },
    {
        "label": "JWTError",
        "importPath": "jose",
        "description": "jose",
        "isExtraImport": true,
        "detail": "jose",
        "documentation": {}
    },
    {
        "label": "jwt",
        "importPath": "jose",
        "description": "jose",
        "isExtraImport": true,
        "detail": "jose",
        "documentation": {}
    },
    {
        "label": "jwt",
        "importPath": "jose",
        "description": "jose",
        "isExtraImport": true,
        "detail": "jose",
        "documentation": {}
    },
    {
        "label": "JWTError",
        "importPath": "jose",
        "description": "jose",
        "isExtraImport": true,
        "detail": "jose",
        "documentation": {}
    },
    {
        "label": "jwt",
        "importPath": "jose",
        "description": "jose",
        "isExtraImport": true,
        "detail": "jose",
        "documentation": {}
    },
    {
        "label": "UsersDAO",
        "importPath": "src.auth.services",
        "description": "src.auth.services",
        "isExtraImport": true,
        "detail": "src.auth.services",
        "documentation": {}
    },
    {
        "label": "UsersDAO",
        "importPath": "src.auth.services",
        "description": "src.auth.services",
        "isExtraImport": true,
        "detail": "src.auth.services",
        "documentation": {}
    },
    {
        "label": "ArtistDAO",
        "importPath": "src.auth.services",
        "description": "src.auth.services",
        "isExtraImport": true,
        "detail": "src.auth.services",
        "documentation": {}
    },
    {
        "label": "ProducerDAO",
        "importPath": "src.auth.services",
        "description": "src.auth.services",
        "isExtraImport": true,
        "detail": "src.auth.services",
        "documentation": {}
    },
    {
        "label": "RoleDAO",
        "importPath": "src.auth.services",
        "description": "src.auth.services",
        "isExtraImport": true,
        "detail": "src.auth.services",
        "documentation": {}
    },
    {
        "label": "UserToRoleDAO",
        "importPath": "src.auth.services",
        "description": "src.auth.services",
        "isExtraImport": true,
        "detail": "src.auth.services",
        "documentation": {}
    },
    {
        "label": "UsersDAO",
        "importPath": "src.auth.services",
        "description": "src.auth.services",
        "isExtraImport": true,
        "detail": "src.auth.services",
        "documentation": {}
    },
    {
        "label": "UsersDAO",
        "importPath": "src.auth.services",
        "description": "src.auth.services",
        "isExtraImport": true,
        "detail": "src.auth.services",
        "documentation": {}
    },
    {
        "label": "UsersDAO",
        "importPath": "src.auth.services",
        "description": "src.auth.services",
        "isExtraImport": true,
        "detail": "src.auth.services",
        "documentation": {}
    },
    {
        "label": "ProducerDAO",
        "importPath": "src.auth.services",
        "description": "src.auth.services",
        "isExtraImport": true,
        "detail": "src.auth.services",
        "documentation": {}
    },
    {
        "label": "UsersDAO",
        "importPath": "src.auth.services",
        "description": "src.auth.services",
        "isExtraImport": true,
        "detail": "src.auth.services",
        "documentation": {}
    },
    {
        "label": "ArtistDAO",
        "importPath": "src.auth.services",
        "description": "src.auth.services",
        "isExtraImport": true,
        "detail": "src.auth.services",
        "documentation": {}
    },
    {
        "label": "ALGORITHM",
        "importPath": "src.auth.utils",
        "description": "src.auth.utils",
        "isExtraImport": true,
        "detail": "src.auth.utils",
        "documentation": {}
    },
    {
        "label": "JWT_REFRESH_SECRET_KEY",
        "importPath": "src.auth.utils",
        "description": "src.auth.utils",
        "isExtraImport": true,
        "detail": "src.auth.utils",
        "documentation": {}
    },
    {
        "label": "authenticate_user",
        "importPath": "src.auth.utils",
        "description": "src.auth.utils",
        "isExtraImport": true,
        "detail": "src.auth.utils",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "src.auth.utils",
        "description": "src.auth.utils",
        "isExtraImport": true,
        "detail": "src.auth.utils",
        "documentation": {}
    },
    {
        "label": "create_refresh_token",
        "importPath": "src.auth.utils",
        "description": "src.auth.utils",
        "isExtraImport": true,
        "detail": "src.auth.utils",
        "documentation": {}
    },
    {
        "label": "get_hashed_password",
        "importPath": "src.auth.utils",
        "description": "src.auth.utils",
        "isExtraImport": true,
        "detail": "src.auth.utils",
        "documentation": {}
    },
    {
        "label": "verify_password",
        "importPath": "src.auth.utils",
        "description": "src.auth.utils",
        "isExtraImport": true,
        "detail": "src.auth.utils",
        "documentation": {}
    },
    {
        "label": "ALGORITHM",
        "importPath": "src.auth.utils",
        "description": "src.auth.utils",
        "isExtraImport": true,
        "detail": "src.auth.utils",
        "documentation": {}
    },
    {
        "label": "JWT_REFRESH_SECRET_KEY",
        "importPath": "src.auth.utils",
        "description": "src.auth.utils",
        "isExtraImport": true,
        "detail": "src.auth.utils",
        "documentation": {}
    },
    {
        "label": "Track",
        "importPath": "src.tracks.models",
        "description": "src.tracks.models",
        "isExtraImport": true,
        "detail": "src.tracks.models",
        "documentation": {}
    },
    {
        "label": "artist_profile_track_association",
        "importPath": "src.tracks.models",
        "description": "src.tracks.models",
        "isExtraImport": true,
        "detail": "src.tracks.models",
        "documentation": {}
    },
    {
        "label": "Track",
        "importPath": "src.tracks.models",
        "description": "src.tracks.models",
        "isExtraImport": true,
        "detail": "src.tracks.models",
        "documentation": {}
    },
    {
        "label": "Track",
        "importPath": "src.tracks.models",
        "description": "src.tracks.models",
        "isExtraImport": true,
        "detail": "src.tracks.models",
        "documentation": {}
    },
    {
        "label": "Squad",
        "importPath": "src.squads.models",
        "description": "src.squads.models",
        "isExtraImport": true,
        "detail": "src.squads.models",
        "documentation": {}
    },
    {
        "label": "squad_producer_profile_association",
        "importPath": "src.squads.models",
        "description": "src.squads.models",
        "isExtraImport": true,
        "detail": "src.squads.models",
        "documentation": {}
    },
    {
        "label": "squad_artist_profile_association",
        "importPath": "src.squads.models",
        "description": "src.squads.models",
        "isExtraImport": true,
        "detail": "src.squads.models",
        "documentation": {}
    },
    {
        "label": "Squad",
        "importPath": "src.squads.models",
        "description": "src.squads.models",
        "isExtraImport": true,
        "detail": "src.squads.models",
        "documentation": {}
    },
    {
        "label": "Squad",
        "importPath": "src.squads.models",
        "description": "src.squads.models",
        "isExtraImport": true,
        "detail": "src.squads.models",
        "documentation": {}
    },
    {
        "label": "unique_filename",
        "importPath": "src.beats.utils",
        "description": "src.beats.utils",
        "isExtraImport": true,
        "detail": "src.beats.utils",
        "documentation": {}
    },
    {
        "label": "unique_filename",
        "importPath": "src.beats.utils",
        "description": "src.beats.utils",
        "isExtraImport": true,
        "detail": "src.beats.utils",
        "documentation": {}
    },
    {
        "label": "save_audio",
        "importPath": "src.beats.utils",
        "description": "src.beats.utils",
        "isExtraImport": true,
        "detail": "src.beats.utils",
        "documentation": {}
    },
    {
        "label": "save_image",
        "importPath": "src.beats.utils",
        "description": "src.beats.utils",
        "isExtraImport": true,
        "detail": "src.beats.utils",
        "documentation": {}
    },
    {
        "label": "unique_filename",
        "importPath": "src.beats.utils",
        "description": "src.beats.utils",
        "isExtraImport": true,
        "detail": "src.beats.utils",
        "documentation": {}
    },
    {
        "label": "CustomException",
        "importPath": "src.exceptions",
        "description": "src.exceptions",
        "isExtraImport": true,
        "detail": "src.exceptions",
        "documentation": {}
    },
    {
        "label": "NotFoundException",
        "importPath": "src.exceptions",
        "description": "src.exceptions",
        "isExtraImport": true,
        "detail": "src.exceptions",
        "documentation": {}
    },
    {
        "label": "NoRightsException",
        "importPath": "src.exceptions",
        "description": "src.exceptions",
        "isExtraImport": true,
        "detail": "src.exceptions",
        "documentation": {}
    },
    {
        "label": "CustomException",
        "importPath": "src.exceptions",
        "description": "src.exceptions",
        "isExtraImport": true,
        "detail": "src.exceptions",
        "documentation": {}
    },
    {
        "label": "NotFoundException",
        "importPath": "src.exceptions",
        "description": "src.exceptions",
        "isExtraImport": true,
        "detail": "src.exceptions",
        "documentation": {}
    },
    {
        "label": "NoRightsException",
        "importPath": "src.exceptions",
        "description": "src.exceptions",
        "isExtraImport": true,
        "detail": "src.exceptions",
        "documentation": {}
    },
    {
        "label": "send_message",
        "importPath": "src.notifications.utils",
        "description": "src.notifications.utils",
        "isExtraImport": true,
        "detail": "src.notifications.utils",
        "documentation": {}
    },
    {
        "label": "send_message",
        "importPath": "src.notifications.utils",
        "description": "src.notifications.utils",
        "isExtraImport": true,
        "detail": "src.notifications.utils",
        "documentation": {}
    },
    {
        "label": "ListenerTagsDAO",
        "importPath": "src.tags.services",
        "description": "src.tags.services",
        "isExtraImport": true,
        "detail": "src.tags.services",
        "documentation": {}
    },
    {
        "label": "TagsDAO",
        "importPath": "src.tags.services",
        "description": "src.tags.services",
        "isExtraImport": true,
        "detail": "src.tags.services",
        "documentation": {}
    },
    {
        "label": "ListenerTagsDAO",
        "importPath": "src.tags.services",
        "description": "src.tags.services",
        "isExtraImport": true,
        "detail": "src.tags.services",
        "documentation": {}
    },
    {
        "label": "ProducerTagsDAO",
        "importPath": "src.tags.services",
        "description": "src.tags.services",
        "isExtraImport": true,
        "detail": "src.tags.services",
        "documentation": {}
    },
    {
        "label": "ArtistTagsDAO",
        "importPath": "src.tags.services",
        "description": "src.tags.services",
        "isExtraImport": true,
        "detail": "src.tags.services",
        "documentation": {}
    },
    {
        "label": "TagsDAO",
        "importPath": "src.tags.services",
        "description": "src.tags.services",
        "isExtraImport": true,
        "detail": "src.tags.services",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "STag",
        "importPath": "src.tags.schemas",
        "description": "src.tags.schemas",
        "isExtraImport": true,
        "detail": "src.tags.schemas",
        "documentation": {}
    },
    {
        "label": "STag",
        "importPath": "src.tags.schemas",
        "description": "src.tags.schemas",
        "isExtraImport": true,
        "detail": "src.tags.schemas",
        "documentation": {}
    },
    {
        "label": "CryptContext",
        "importPath": "passlib.context",
        "description": "passlib.context",
        "isExtraImport": true,
        "detail": "passlib.context",
        "documentation": {}
    },
    {
        "label": "CryptContext",
        "importPath": "passlib.context",
        "description": "passlib.context",
        "isExtraImport": true,
        "detail": "passlib.context",
        "documentation": {}
    },
    {
        "label": "BeatpacksRepository",
        "importPath": "src.beatpacks.services",
        "description": "src.beatpacks.services",
        "isExtraImport": true,
        "detail": "src.beatpacks.services",
        "documentation": {}
    },
    {
        "label": "SBeatpackBase",
        "importPath": "src.beatpacks.schemas",
        "description": "src.beatpacks.schemas",
        "isExtraImport": true,
        "detail": "src.beatpacks.schemas",
        "documentation": {}
    },
    {
        "label": "SBeatPack",
        "importPath": "src.beatpacks.schemas",
        "description": "src.beatpacks.schemas",
        "isExtraImport": true,
        "detail": "src.beatpacks.schemas",
        "documentation": {}
    },
    {
        "label": "SBeatPackCreate",
        "importPath": "src.beatpacks.schemas",
        "description": "src.beatpacks.schemas",
        "isExtraImport": true,
        "detail": "src.beatpacks.schemas",
        "documentation": {}
    },
    {
        "label": "SBeat",
        "importPath": "src.beats.schemas",
        "description": "src.beats.schemas",
        "isExtraImport": true,
        "detail": "src.beats.schemas",
        "documentation": {}
    },
    {
        "label": "SBeatBase",
        "importPath": "src.beats.schemas",
        "description": "src.beats.schemas",
        "isExtraImport": true,
        "detail": "src.beats.schemas",
        "documentation": {}
    },
    {
        "label": "SBeat",
        "importPath": "src.beats.schemas",
        "description": "src.beats.schemas",
        "isExtraImport": true,
        "detail": "src.beats.schemas",
        "documentation": {}
    },
    {
        "label": "SBeatCreate",
        "importPath": "src.beats.schemas",
        "description": "src.beats.schemas",
        "isExtraImport": true,
        "detail": "src.beats.schemas",
        "documentation": {}
    },
    {
        "label": "SBeatUpdate",
        "importPath": "src.beats.schemas",
        "description": "src.beats.schemas",
        "isExtraImport": true,
        "detail": "src.beats.schemas",
        "documentation": {}
    },
    {
        "label": "SBeatRelease",
        "importPath": "src.beats.schemas",
        "description": "src.beats.schemas",
        "isExtraImport": true,
        "detail": "src.beats.schemas",
        "documentation": {}
    },
    {
        "label": "SBeatBase",
        "importPath": "src.beats.schemas",
        "description": "src.beats.schemas",
        "isExtraImport": true,
        "detail": "src.beats.schemas",
        "documentation": {}
    },
    {
        "label": "SBeat",
        "importPath": "src.beats.schemas",
        "description": "src.beats.schemas",
        "isExtraImport": true,
        "detail": "src.beats.schemas",
        "documentation": {}
    },
    {
        "label": "SBeatCreate",
        "importPath": "src.beats.schemas",
        "description": "src.beats.schemas",
        "isExtraImport": true,
        "detail": "src.beats.schemas",
        "documentation": {}
    },
    {
        "label": "SBeatPackBase",
        "importPath": "src.beats.schemas",
        "description": "src.beats.schemas",
        "isExtraImport": true,
        "detail": "src.beats.schemas",
        "documentation": {}
    },
    {
        "label": "SBeatPack",
        "importPath": "src.beats.schemas",
        "description": "src.beats.schemas",
        "isExtraImport": true,
        "detail": "src.beats.schemas",
        "documentation": {}
    },
    {
        "label": "SBeatPackCreate",
        "importPath": "src.beats.schemas",
        "description": "src.beats.schemas",
        "isExtraImport": true,
        "detail": "src.beats.schemas",
        "documentation": {}
    },
    {
        "label": "BeatsRepository",
        "importPath": "src.beats.services",
        "description": "src.beats.services",
        "isExtraImport": true,
        "detail": "src.beats.services",
        "documentation": {}
    },
    {
        "label": "BeatsRepository",
        "importPath": "src.beats.services",
        "description": "src.beats.services",
        "isExtraImport": true,
        "detail": "src.beats.services",
        "documentation": {}
    },
    {
        "label": "BeatPacksRepository",
        "importPath": "src.beats.services",
        "description": "src.beats.services",
        "isExtraImport": true,
        "detail": "src.beats.services",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "shutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shutil",
        "description": "shutil",
        "detail": "shutil",
        "documentation": {}
    },
    {
        "label": "aiofiles",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "aiofiles",
        "description": "aiofiles",
        "detail": "aiofiles",
        "documentation": {}
    },
    {
        "label": "MP3",
        "importPath": "mutagen.mp3",
        "description": "mutagen.mp3",
        "isExtraImport": true,
        "detail": "mutagen.mp3",
        "documentation": {}
    },
    {
        "label": "MP3",
        "importPath": "mutagen.mp3",
        "description": "mutagen.mp3",
        "isExtraImport": true,
        "detail": "mutagen.mp3",
        "documentation": {}
    },
    {
        "label": "MP3",
        "importPath": "mutagen.mp3",
        "description": "mutagen.mp3",
        "isExtraImport": true,
        "detail": "mutagen.mp3",
        "documentation": {}
    },
    {
        "label": "WavPack",
        "importPath": "mutagen.wavpack",
        "description": "mutagen.wavpack",
        "isExtraImport": true,
        "detail": "mutagen.wavpack",
        "documentation": {}
    },
    {
        "label": "WavPack",
        "importPath": "mutagen.wavpack",
        "description": "mutagen.wavpack",
        "isExtraImport": true,
        "detail": "mutagen.wavpack",
        "documentation": {}
    },
    {
        "label": "WavPack",
        "importPath": "mutagen.wavpack",
        "description": "mutagen.wavpack",
        "isExtraImport": true,
        "detail": "mutagen.wavpack",
        "documentation": {}
    },
    {
        "label": "LicensesRepository",
        "importPath": "src.licenses.services",
        "description": "src.licenses.services",
        "isExtraImport": true,
        "detail": "src.licenses.services",
        "documentation": {}
    },
    {
        "label": "SLicenseBase",
        "importPath": "src.licenses.schemas",
        "description": "src.licenses.schemas",
        "isExtraImport": true,
        "detail": "src.licenses.schemas",
        "documentation": {}
    },
    {
        "label": "License",
        "importPath": "src.licenses.models",
        "description": "src.licenses.models",
        "isExtraImport": true,
        "detail": "src.licenses.models",
        "documentation": {}
    },
    {
        "label": "License",
        "importPath": "src.licenses.models",
        "description": "src.licenses.models",
        "isExtraImport": true,
        "detail": "src.licenses.models",
        "documentation": {}
    },
    {
        "label": "MessagesRepository",
        "importPath": "src.messages.services",
        "description": "src.messages.services",
        "isExtraImport": true,
        "detail": "src.messages.services",
        "documentation": {}
    },
    {
        "label": "Message",
        "importPath": "src.messages.models",
        "description": "src.messages.models",
        "isExtraImport": true,
        "detail": "src.messages.models",
        "documentation": {}
    },
    {
        "label": "Chat",
        "importPath": "src.messages.models",
        "description": "src.messages.models",
        "isExtraImport": true,
        "detail": "src.messages.models",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.ext.declarative",
        "description": "sqlalchemy.ext.declarative",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.declarative",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.ext.declarative",
        "description": "sqlalchemy.ext.declarative",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.declarative",
        "documentation": {}
    },
    {
        "label": "Spotify",
        "importPath": "src.music.services",
        "description": "src.music.services",
        "isExtraImport": true,
        "detail": "src.music.services",
        "documentation": {}
    },
    {
        "label": "Spotify",
        "importPath": "src.music.services",
        "description": "src.music.services",
        "isExtraImport": true,
        "detail": "src.music.services",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "fastapi_cache.decorator",
        "description": "fastapi_cache.decorator",
        "isExtraImport": true,
        "detail": "fastapi_cache.decorator",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "fastapi_cache.decorator",
        "description": "fastapi_cache.decorator",
        "isExtraImport": true,
        "detail": "fastapi_cache.decorator",
        "documentation": {}
    },
    {
        "label": "spotipy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "spotipy",
        "description": "spotipy",
        "detail": "spotipy",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "SpotifyClientCredentials",
        "importPath": "spotipy.oauth2",
        "description": "spotipy.oauth2",
        "isExtraImport": true,
        "detail": "spotipy.oauth2",
        "documentation": {}
    },
    {
        "label": "SpotifyClientCredentials",
        "importPath": "spotipy.oauth2",
        "description": "spotipy.oauth2",
        "isExtraImport": true,
        "detail": "spotipy.oauth2",
        "documentation": {}
    },
    {
        "label": "smtplib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "smtplib",
        "description": "smtplib",
        "detail": "smtplib",
        "documentation": {}
    },
    {
        "label": "MIMEText",
        "importPath": "email.mime.text",
        "description": "email.mime.text",
        "isExtraImport": true,
        "detail": "email.mime.text",
        "documentation": {}
    },
    {
        "label": "MIMEMultipart",
        "importPath": "email.mime.multipart",
        "description": "email.mime.multipart",
        "isExtraImport": true,
        "detail": "email.mime.multipart",
        "documentation": {}
    },
    {
        "label": "searchRepository",
        "importPath": "src.search.services",
        "description": "src.search.services",
        "isExtraImport": true,
        "detail": "src.search.services",
        "documentation": {}
    },
    {
        "label": "BeatPacksRepository",
        "importPath": "src.search.services",
        "description": "src.search.services",
        "isExtraImport": true,
        "detail": "src.search.services",
        "documentation": {}
    },
    {
        "label": "SBeatBase",
        "importPath": "src.search.schemas",
        "description": "src.search.schemas",
        "isExtraImport": true,
        "detail": "src.search.schemas",
        "documentation": {}
    },
    {
        "label": "SBeat",
        "importPath": "src.search.schemas",
        "description": "src.search.schemas",
        "isExtraImport": true,
        "detail": "src.search.schemas",
        "documentation": {}
    },
    {
        "label": "SBeatCreate",
        "importPath": "src.search.schemas",
        "description": "src.search.schemas",
        "isExtraImport": true,
        "detail": "src.search.schemas",
        "documentation": {}
    },
    {
        "label": "SBeatPackBase",
        "importPath": "src.search.schemas",
        "description": "src.search.schemas",
        "isExtraImport": true,
        "detail": "src.search.schemas",
        "documentation": {}
    },
    {
        "label": "SBeatPack",
        "importPath": "src.search.schemas",
        "description": "src.search.schemas",
        "isExtraImport": true,
        "detail": "src.search.schemas",
        "documentation": {}
    },
    {
        "label": "SBeatPackCreate",
        "importPath": "src.search.schemas",
        "description": "src.search.schemas",
        "isExtraImport": true,
        "detail": "src.search.schemas",
        "documentation": {}
    },
    {
        "label": "save_audio",
        "importPath": "src.search.utils",
        "description": "src.search.utils",
        "isExtraImport": true,
        "detail": "src.search.utils",
        "documentation": {}
    },
    {
        "label": "save_image",
        "importPath": "src.search.utils",
        "description": "src.search.utils",
        "isExtraImport": true,
        "detail": "src.search.utils",
        "documentation": {}
    },
    {
        "label": "SoundkitRepository",
        "importPath": "src.soundkits.services",
        "description": "src.soundkits.services",
        "isExtraImport": true,
        "detail": "src.soundkits.services",
        "documentation": {}
    },
    {
        "label": "SSoundkit",
        "importPath": "src.soundkits.schemas",
        "description": "src.soundkits.schemas",
        "isExtraImport": true,
        "detail": "src.soundkits.schemas",
        "documentation": {}
    },
    {
        "label": "SSoundkitUpdate",
        "importPath": "src.soundkits.schemas",
        "description": "src.soundkits.schemas",
        "isExtraImport": true,
        "detail": "src.soundkits.schemas",
        "documentation": {}
    },
    {
        "label": "unique_filename",
        "importPath": "src.soundkits.utils",
        "description": "src.soundkits.utils",
        "isExtraImport": true,
        "detail": "src.soundkits.utils",
        "documentation": {}
    },
    {
        "label": "Soundkit",
        "importPath": "src.soundkits.models",
        "description": "src.soundkits.models",
        "isExtraImport": true,
        "detail": "src.soundkits.models",
        "documentation": {}
    },
    {
        "label": "Soundkit",
        "importPath": "src.soundkits.models",
        "description": "src.soundkits.models",
        "isExtraImport": true,
        "detail": "src.soundkits.models",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "TelegramAccountDAO",
        "importPath": "src.subscription.services",
        "description": "src.subscription.services",
        "isExtraImport": true,
        "detail": "src.subscription.services",
        "documentation": {}
    },
    {
        "label": "TelegramAccount",
        "importPath": "src.subscription.models",
        "description": "src.subscription.models",
        "isExtraImport": true,
        "detail": "src.subscription.models",
        "documentation": {}
    },
    {
        "label": "TelegramAccount",
        "importPath": "src.subscription.models",
        "description": "src.subscription.models",
        "isExtraImport": true,
        "detail": "src.subscription.models",
        "documentation": {}
    },
    {
        "label": "TracksRepository",
        "importPath": "src.tracks.services",
        "description": "src.tracks.services",
        "isExtraImport": true,
        "detail": "src.tracks.services",
        "documentation": {}
    },
    {
        "label": "STrackBase",
        "importPath": "src.tracks.schemas",
        "description": "src.tracks.schemas",
        "isExtraImport": true,
        "detail": "src.tracks.schemas",
        "documentation": {}
    },
    {
        "label": "STrack",
        "importPath": "src.tracks.schemas",
        "description": "src.tracks.schemas",
        "isExtraImport": true,
        "detail": "src.tracks.schemas",
        "documentation": {}
    },
    {
        "label": "STrackCreate",
        "importPath": "src.tracks.schemas",
        "description": "src.tracks.schemas",
        "isExtraImport": true,
        "detail": "src.tracks.schemas",
        "documentation": {}
    },
    {
        "label": "unique_track_filename",
        "importPath": "src.tracks.utils",
        "description": "src.tracks.utils",
        "isExtraImport": true,
        "detail": "src.tracks.utils",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "BaseSettings",
        "importPath": "pydantic_settings",
        "description": "pydantic_settings",
        "isExtraImport": true,
        "detail": "pydantic_settings",
        "documentation": {}
    },
    {
        "label": "TIMESTAMP",
        "importPath": "sqlalchemy.dialects.postgresql",
        "description": "sqlalchemy.dialects.postgresql",
        "isExtraImport": true,
        "detail": "sqlalchemy.dialects.postgresql",
        "documentation": {}
    },
    {
        "label": "TIMESTAMP",
        "importPath": "sqlalchemy.dialects.postgresql",
        "description": "sqlalchemy.dialects.postgresql",
        "isExtraImport": true,
        "detail": "sqlalchemy.dialects.postgresql",
        "documentation": {}
    },
    {
        "label": "CORSMiddleware",
        "importPath": "fastapi.middleware.cors",
        "description": "fastapi.middleware.cors",
        "isExtraImport": true,
        "detail": "fastapi.middleware.cors",
        "documentation": {}
    },
    {
        "label": "FastAPICache",
        "importPath": "fastapi_cache",
        "description": "fastapi_cache",
        "isExtraImport": true,
        "detail": "fastapi_cache",
        "documentation": {}
    },
    {
        "label": "RedisBackend",
        "importPath": "fastapi_cache.backends.redis",
        "description": "fastapi_cache.backends.redis",
        "isExtraImport": true,
        "detail": "fastapi_cache.backends.redis",
        "documentation": {}
    },
    {
        "label": "asyncio",
        "importPath": "redis",
        "description": "redis",
        "isExtraImport": true,
        "detail": "redis",
        "documentation": {}
    },
    {
        "label": "Admin",
        "importPath": "sqladmin",
        "description": "sqladmin",
        "isExtraImport": true,
        "detail": "sqladmin",
        "documentation": {}
    },
    {
        "label": "ModelView",
        "importPath": "sqladmin",
        "description": "sqladmin",
        "isExtraImport": true,
        "detail": "sqladmin",
        "documentation": {}
    },
    {
        "label": "auth",
        "importPath": "src.auth.router",
        "description": "src.auth.router",
        "isExtraImport": true,
        "detail": "src.auth.router",
        "documentation": {}
    },
    {
        "label": "beats",
        "importPath": "src.beats.router",
        "description": "src.beats.router",
        "isExtraImport": true,
        "detail": "src.beats.router",
        "documentation": {}
    },
    {
        "label": "music",
        "importPath": "src.music.router",
        "description": "src.music.router",
        "isExtraImport": true,
        "detail": "src.music.router",
        "documentation": {}
    },
    {
        "label": "beatpacks",
        "importPath": "src.beatpacks.router",
        "description": "src.beatpacks.router",
        "isExtraImport": true,
        "detail": "src.beatpacks.router",
        "documentation": {}
    },
    {
        "label": "soundkits",
        "importPath": "src.soundkits.router",
        "description": "src.soundkits.router",
        "isExtraImport": true,
        "detail": "src.soundkits.router",
        "documentation": {}
    },
    {
        "label": "albums",
        "importPath": "src.albums.router",
        "description": "src.albums.router",
        "isExtraImport": true,
        "detail": "src.albums.router",
        "documentation": {}
    },
    {
        "label": "tracks",
        "importPath": "src.tracks.router",
        "description": "src.tracks.router",
        "isExtraImport": true,
        "detail": "src.tracks.router",
        "documentation": {}
    },
    {
        "label": "subscription",
        "importPath": "src.subscription.router",
        "description": "src.subscription.router",
        "isExtraImport": true,
        "detail": "src.subscription.router",
        "documentation": {}
    },
    {
        "label": "tags",
        "importPath": "src.tags.router",
        "description": "src.tags.router",
        "isExtraImport": true,
        "detail": "src.tags.router",
        "documentation": {}
    },
    {
        "label": "licenses",
        "importPath": "src.licenses.router",
        "description": "src.licenses.router",
        "isExtraImport": true,
        "detail": "src.licenses.router",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "src.messages.router",
        "description": "src.messages.router",
        "isExtraImport": true,
        "detail": "src.messages.router",
        "documentation": {}
    },
    {
        "label": "squads",
        "importPath": "src.squads.router",
        "description": "src.squads.router",
        "isExtraImport": true,
        "detail": "src.squads.router",
        "documentation": {}
    },
    {
        "label": "boto3",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "boto3",
        "description": "boto3",
        "detail": "boto3",
        "documentation": {}
    },
    {
        "label": "ClientError",
        "importPath": "botocore.exceptions",
        "description": "botocore.exceptions",
        "isExtraImport": true,
        "detail": "botocore.exceptions",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "pytest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytest",
        "description": "pytest",
        "detail": "pytest",
        "documentation": {}
    },
    {
        "label": "TestClient",
        "importPath": "fastapi.testclient",
        "description": "fastapi.testclient",
        "isExtraImport": true,
        "detail": "fastapi.testclient",
        "documentation": {}
    },
    {
        "label": "AsyncClient",
        "importPath": "httpx",
        "description": "httpx",
        "isExtraImport": true,
        "detail": "httpx",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "src.main",
        "description": "src.main",
        "isExtraImport": true,
        "detail": "src.main",
        "documentation": {}
    },
    {
        "label": "client",
        "importPath": "conftest",
        "description": "conftest",
        "isExtraImport": true,
        "detail": "conftest",
        "documentation": {}
    },
    {
        "label": "async_session_maker",
        "importPath": "conftest",
        "description": "conftest",
        "isExtraImport": true,
        "detail": "conftest",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "pformat",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "jmespath",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "jmespath",
        "description": "jmespath",
        "detail": "jmespath",
        "documentation": {}
    },
    {
        "label": "exceptions",
        "importPath": "jmespath",
        "description": "jmespath",
        "isExtraImport": true,
        "detail": "jmespath",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "backend.migrations.versions.8645f6452298_inital_blyat",
        "description": "backend.migrations.versions.8645f6452298_inital_blyat",
        "peekOfCode": "def upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass\n    # ### end Alembic commands ###\ndef downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass\n    # ### end Alembic commands ###",
        "detail": "backend.migrations.versions.8645f6452298_inital_blyat",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "backend.migrations.versions.8645f6452298_inital_blyat",
        "description": "backend.migrations.versions.8645f6452298_inital_blyat",
        "peekOfCode": "def downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass\n    # ### end Alembic commands ###",
        "detail": "backend.migrations.versions.8645f6452298_inital_blyat",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "backend.migrations.versions.ac5f3bbae7d6_inital_blyat",
        "description": "backend.migrations.versions.ac5f3bbae7d6_inital_blyat",
        "peekOfCode": "def upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass\n    # ### end Alembic commands ###\ndef downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass\n    # ### end Alembic commands ###",
        "detail": "backend.migrations.versions.ac5f3bbae7d6_inital_blyat",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "backend.migrations.versions.ac5f3bbae7d6_inital_blyat",
        "description": "backend.migrations.versions.ac5f3bbae7d6_inital_blyat",
        "peekOfCode": "def downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass\n    # ### end Alembic commands ###",
        "detail": "backend.migrations.versions.ac5f3bbae7d6_inital_blyat",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "backend.migrations.versions.b3c5602e1a6f_inital_blyat",
        "description": "backend.migrations.versions.b3c5602e1a6f_inital_blyat",
        "peekOfCode": "def upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('artist_profiles',\n    sa.Column('description', sa.String(), nullable=False),\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('is_available', sa.Boolean(), nullable=False),\n    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),\n    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),\n    sa.PrimaryKeyConstraint('id')\n    )",
        "detail": "backend.migrations.versions.b3c5602e1a6f_inital_blyat",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "backend.migrations.versions.b3c5602e1a6f_inital_blyat",
        "description": "backend.migrations.versions.b3c5602e1a6f_inital_blyat",
        "peekOfCode": "def downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_table('squad_producer_profile_association')\n    op.drop_table('squad_artist_profile_association')\n    op.drop_table('likes')\n    op.drop_table('beats_to_beatpacks_association_table')\n    op.drop_table('artist_profile_track_association')\n    op.drop_table('artist_profile_album_association')\n    op.drop_table('album_track_association')\n    op.drop_table('user_to_roles_association')",
        "detail": "backend.migrations.versions.b3c5602e1a6f_inital_blyat",
        "documentation": {}
    },
    {
        "label": "run_migrations_offline",
        "kind": 2,
        "importPath": "backend.migrations.env",
        "description": "backend.migrations.env",
        "peekOfCode": "def run_migrations_offline() -> None:\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation\n    we don't even need a DBAPI to be available.\n    Calls to context.execute() here emit the given string to the\n    script output.\n    \"\"\"\n    url = config.get_main_option(\"sqlalchemy.url\")",
        "detail": "backend.migrations.env",
        "documentation": {}
    },
    {
        "label": "do_run_migrations",
        "kind": 2,
        "importPath": "backend.migrations.env",
        "description": "backend.migrations.env",
        "peekOfCode": "def do_run_migrations(connection: Connection) -> None:\n    context.configure(connection=connection, target_metadata=target_metadata)\n    with context.begin_transaction():\n        context.run_migrations()\nasync def run_async_migrations() -> None:\n    \"\"\"In this scenario we need to create an Engine\n    and associate a connection with the context.\n    \"\"\"\n    connectable = async_engine_from_config(\n        config.get_section(config.config_ini_section, {}),",
        "detail": "backend.migrations.env",
        "documentation": {}
    },
    {
        "label": "run_migrations_online",
        "kind": 2,
        "importPath": "backend.migrations.env",
        "description": "backend.migrations.env",
        "peekOfCode": "def run_migrations_online() -> None:\n    \"\"\"Run migrations in 'online' mode.\"\"\"\n    asyncio.run(run_async_migrations())\nif context.is_offline_mode():\n    run_migrations_offline()\nelse:\n    run_migrations_online()",
        "detail": "backend.migrations.env",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 5,
        "importPath": "backend.migrations.env",
        "description": "backend.migrations.env",
        "peekOfCode": "config = context.config\n# Interpret the config file for Python logging.\n# This line sets up loggers basically.\nif config.config_file_name is not None:\n    fileConfig(config.config_file_name)\n# add your model's MetaData object here\n# for 'autogenerate' support\n# from myapp import mymodel\n# target_metadata = mymodel.Base.metadata\nfrom src.albums.models import Album, album_track_association, artist_profile_album_association",
        "detail": "backend.migrations.env",
        "documentation": {}
    },
    {
        "label": "target_metadata",
        "kind": 5,
        "importPath": "backend.migrations.env",
        "description": "backend.migrations.env",
        "peekOfCode": "target_metadata = [\n    Base.metadata, \n]\nimport sys\nimport os\n# Добавляет корневую папку проекта в sys.path\n# other values from the config, defined by the needs of env.py,\n# can be acquired:\n# my_important_option = config.get_main_option(\"my_important_option\")\n# ... etc.",
        "detail": "backend.migrations.env",
        "documentation": {}
    },
    {
        "label": "Album",
        "kind": 6,
        "importPath": "backend.src.albums.models",
        "description": "backend.src.albums.models",
        "peekOfCode": "class Album(Base):\n    __tablename__ = \"albums\"\n    name: Mapped[str] = mapped_column(nullable=False)\n    picture_url: Mapped[str] = mapped_column(nullable=True)\n    description: Mapped[str] = mapped_column(nullable=True)\n    co_prod: Mapped[str] = mapped_column(nullable=True)\n    prod_by: Mapped[str] = mapped_column(nullable=True)\n    type: Mapped[str] = mapped_column(nullable=True)\n    artist_profiles: Mapped[\"ArtistProfile\"] = relationship(secondary=artist_profile_album_association, back_populates=\"albums\")\n    tracks: Mapped[\"Track\"] = relationship(secondary=album_track_association, back_populates=\"albums\")",
        "detail": "backend.src.albums.models",
        "documentation": {}
    },
    {
        "label": "artist_profile_album_association",
        "kind": 5,
        "importPath": "backend.src.albums.models",
        "description": "backend.src.albums.models",
        "peekOfCode": "artist_profile_album_association = Table(\n    'artist_profile_album_association',\n    Base.metadata,\n    Column('artist_profile_id', Integer, ForeignKey('artist_profiles.id')),\n    Column('album_id', Integer, ForeignKey('albums.id'))\n)\nalbum_track_association = Table('album_track_association', Base.metadata,\n    Column('album_id', Integer, ForeignKey('albums.id')),\n    Column('track_id', Integer, ForeignKey('tracks.id'))\n)",
        "detail": "backend.src.albums.models",
        "documentation": {}
    },
    {
        "label": "album_track_association",
        "kind": 5,
        "importPath": "backend.src.albums.models",
        "description": "backend.src.albums.models",
        "peekOfCode": "album_track_association = Table('album_track_association', Base.metadata,\n    Column('album_id', Integer, ForeignKey('albums.id')),\n    Column('track_id', Integer, ForeignKey('tracks.id'))\n)\nclass Album(Base):\n    __tablename__ = \"albums\"\n    name: Mapped[str] = mapped_column(nullable=False)\n    picture_url: Mapped[str] = mapped_column(nullable=True)\n    description: Mapped[str] = mapped_column(nullable=True)\n    co_prod: Mapped[str] = mapped_column(nullable=True)",
        "detail": "backend.src.albums.models",
        "documentation": {}
    },
    {
        "label": "albums",
        "kind": 5,
        "importPath": "backend.src.albums.router",
        "description": "backend.src.albums.router",
        "peekOfCode": "albums = APIRouter(\n    prefix = \"/albums\",\n    tags = [\"Albums\"]\n)\n@albums.get(\"/my\", summary=\"albums by current user\")\nasync def get_user_albums(user: SUser = Depends(get_current_user)):\n    response = await AlbumsRepository.find_all(user=user)\n    return response\n@albums.get(\"/all\", summary=\"Get all albums\")\nasync def all_albums():",
        "detail": "backend.src.albums.router",
        "documentation": {}
    },
    {
        "label": "SAlbumBase",
        "kind": 6,
        "importPath": "backend.src.albums.schemas",
        "description": "backend.src.albums.schemas",
        "peekOfCode": "class SAlbumBase(BaseModel):\n    title: str\n    picture: Optional[str]\n    description: Optional[str]\n    file_path: str\n    co_prod: Optional[str]\n    prod_by: Optional[str]\n    playlist_id: Optional[int]\n    user_id: int\n    Track_pack_id: Optional[int]",
        "detail": "backend.src.albums.schemas",
        "documentation": {}
    },
    {
        "label": "SAlbumCreate",
        "kind": 6,
        "importPath": "backend.src.albums.schemas",
        "description": "backend.src.albums.schemas",
        "peekOfCode": "class SAlbumCreate(SAlbumBase):\n    pass\nclass SAlbum(SAlbumBase):\n    id: int\n    is_available: bool\n    created_at: datetime\n    class Config:\n        orm_mode = True",
        "detail": "backend.src.albums.schemas",
        "documentation": {}
    },
    {
        "label": "SAlbum",
        "kind": 6,
        "importPath": "backend.src.albums.schemas",
        "description": "backend.src.albums.schemas",
        "peekOfCode": "class SAlbum(SAlbumBase):\n    id: int\n    is_available: bool\n    created_at: datetime\n    class Config:\n        orm_mode = True",
        "detail": "backend.src.albums.schemas",
        "documentation": {}
    },
    {
        "label": "AlbumsRepository",
        "kind": 6,
        "importPath": "backend.src.albums.services",
        "description": "backend.src.albums.services",
        "peekOfCode": "class AlbumsRepository(SQLAlchemyRepository):\n    model = Album",
        "detail": "backend.src.albums.services",
        "documentation": {}
    },
    {
        "label": "Role",
        "kind": 6,
        "importPath": "backend.src.auth.models",
        "description": "backend.src.auth.models",
        "peekOfCode": "class Role(Base):\n    __tablename__ = 'roles'\n    name: Mapped[str] = mapped_column(nullable=False)\n    users: Mapped[List[\"User\"]] = relationship(secondary=user_to_roles_association, back_populates=\"roles\")\nclass User(Base):\n    __tablename__ = 'users'\n    username: Mapped[str] = mapped_column(nullable=False)\n    email: Mapped[str] = mapped_column(nullable=False)\n    password: Mapped[str] = mapped_column(nullable=False)\n    picture_url: Mapped[str] = mapped_column(nullable=True, default=\"https://img.favpng.com/22/0/21/computer-icons-user-profile-clip-art-png-favpng-MhMHJ0Fw21MJadYjpvDQbzu5S.jpg\")",
        "detail": "backend.src.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "backend.src.auth.models",
        "description": "backend.src.auth.models",
        "peekOfCode": "class User(Base):\n    __tablename__ = 'users'\n    username: Mapped[str] = mapped_column(nullable=False)\n    email: Mapped[str] = mapped_column(nullable=False)\n    password: Mapped[str] = mapped_column(nullable=False)\n    picture_url: Mapped[str] = mapped_column(nullable=True, default=\"https://img.favpng.com/22/0/21/computer-icons-user-profile-clip-art-png-favpng-MhMHJ0Fw21MJadYjpvDQbzu5S.jpg\")\n    is_active: Mapped[bool] = mapped_column(nullable=True, default=False)\n    birthday: Mapped[datetime] = mapped_column(DateTime, nullable=False)\n    registered_at: Mapped[datetime] = mapped_column(DateTime, default=datetime.utcnow)\n    artist_profile_id: Mapped[int] = mapped_column(ForeignKey(\"artist_profiles.id\"), nullable=True)",
        "detail": "backend.src.auth.models",
        "documentation": {}
    },
    {
        "label": "ArtistProfile",
        "kind": 6,
        "importPath": "backend.src.auth.models",
        "description": "backend.src.auth.models",
        "peekOfCode": "class ArtistProfile(Base):\n    __tablename__ = 'artist_profiles'\n    description: Mapped[str] = mapped_column()\n    tracks: Mapped[List[\"Track\"]] = relationship(secondary=artist_profile_track_association, back_populates=\"artist_profiles\")\n    albums: Mapped[List[\"Album\"]] = relationship(secondary=artist_profile_album_association, back_populates=\"artist_profiles\")\n    squads: Mapped[List[\"Squad\"]] = relationship(secondary=squad_artist_profile_association, back_populates=\"artist_profiles\")\n    tags: Mapped[List[\"Tag\"]] = relationship(secondary=artist_tags_association, back_populates=\"artist_profiles\")\n    user: Mapped[\"User\"] = relationship(\"User\")\nclass ProducerProfile(Base):\n    __tablename__ = 'producer_profiles'",
        "detail": "backend.src.auth.models",
        "documentation": {}
    },
    {
        "label": "ProducerProfile",
        "kind": 6,
        "importPath": "backend.src.auth.models",
        "description": "backend.src.auth.models",
        "peekOfCode": "class ProducerProfile(Base):\n    __tablename__ = 'producer_profiles'\n    description: Mapped[str] = mapped_column()\n    user: Mapped[\"User\"] = relationship(\"User\")\n    tags: Mapped[List[\"Tag\"]] = relationship(secondary=producer_tags_association, back_populates=\"producer_profiles\")\n    squads: Mapped[List[\"Squad\"]] = relationship(secondary=squad_producer_profile_association, back_populates=\"producer_profiles\")",
        "detail": "backend.src.auth.models",
        "documentation": {}
    },
    {
        "label": "user_to_roles_association",
        "kind": 5,
        "importPath": "backend.src.auth.models",
        "description": "backend.src.auth.models",
        "peekOfCode": "user_to_roles_association = Table(\n    'user_to_roles_association', \n    Base.metadata,\n    Column('user_id', ForeignKey('users.id'), primary_key=True),\n    Column('role_id', ForeignKey('roles.id'), primary_key=True)\n)\nclass Role(Base):\n    __tablename__ = 'roles'\n    name: Mapped[str] = mapped_column(nullable=False)\n    users: Mapped[List[\"User\"]] = relationship(secondary=user_to_roles_association, back_populates=\"roles\")",
        "detail": "backend.src.auth.models",
        "documentation": {}
    },
    {
        "label": "auth",
        "kind": 5,
        "importPath": "backend.src.auth.router",
        "description": "backend.src.auth.router",
        "peekOfCode": "auth = APIRouter(\n    prefix = \"/auth\",\n    tags = [\"Auth & Users\"]\n)\n\"\"\"\nUsers routes\n\"\"\"\n@auth.get('/users/me', summary='Get details of currently logged in user')\nasync def get_me(user: SUser = Depends(get_current_user)) -> SUser:\n    return user ",
        "detail": "backend.src.auth.router",
        "documentation": {}
    },
    {
        "label": "Role",
        "kind": 6,
        "importPath": "backend.src.auth.schemas",
        "description": "backend.src.auth.schemas",
        "peekOfCode": "class Role(str, Enum):\n    superuser = \"superuser\"\n    moder = \"moder\"\n    artist = \"artist\"\n    producer = \"producer\"\n    listener = \"listener\"\n\"\"\"\nUser (Listener) schemas\n\"\"\"\nclass SUserBase(BaseModel):",
        "detail": "backend.src.auth.schemas",
        "documentation": {}
    },
    {
        "label": "SUserBase",
        "kind": 6,
        "importPath": "backend.src.auth.schemas",
        "description": "backend.src.auth.schemas",
        "peekOfCode": "class SUserBase(BaseModel):\n    username: str = Field(min_length=5, max_length=25)\n    email: EmailStr\n    picture_url: Optional[str]\n    birthday: Optional[date]\n    roles: List[Role]\nclass SUser(SUserBase):\n    id: int\n    created_at: datetime\n    updated_at: datetime",
        "detail": "backend.src.auth.schemas",
        "documentation": {}
    },
    {
        "label": "SUser",
        "kind": 6,
        "importPath": "backend.src.auth.schemas",
        "description": "backend.src.auth.schemas",
        "peekOfCode": "class SUser(SUserBase):\n    id: int\n    created_at: datetime\n    updated_at: datetime\nclass SUserUpdate(BaseModel):\n    username: Optional[str] = Field(min_length=5, max_length=25)\n    email: Optional[EmailStr]\n    picture_url: Optional[str]\n    tags: Optional[List[STag]]\n    roles: Optional[List[Role]]",
        "detail": "backend.src.auth.schemas",
        "documentation": {}
    },
    {
        "label": "SUserUpdate",
        "kind": 6,
        "importPath": "backend.src.auth.schemas",
        "description": "backend.src.auth.schemas",
        "peekOfCode": "class SUserUpdate(BaseModel):\n    username: Optional[str] = Field(min_length=5, max_length=25)\n    email: Optional[EmailStr]\n    picture_url: Optional[str]\n    tags: Optional[List[STag]]\n    roles: Optional[List[Role]]\n\"\"\"\nArtist schemas\n\"\"\"\nclass SArtistBase(BaseModel):",
        "detail": "backend.src.auth.schemas",
        "documentation": {}
    },
    {
        "label": "SArtistBase",
        "kind": 6,
        "importPath": "backend.src.auth.schemas",
        "description": "backend.src.auth.schemas",
        "peekOfCode": "class SArtistBase(BaseModel):\n    user: SUser\n    description: Optional[str]\n    tags: Optional[List[STag]]\nclass SArtist(SArtistBase):\n    id: int\n    created_at: datetime\n    updated_at: datetime\nclass SArtistUpdate(BaseModel):\n    description: Optional[str] = Field(max_length=255)",
        "detail": "backend.src.auth.schemas",
        "documentation": {}
    },
    {
        "label": "SArtist",
        "kind": 6,
        "importPath": "backend.src.auth.schemas",
        "description": "backend.src.auth.schemas",
        "peekOfCode": "class SArtist(SArtistBase):\n    id: int\n    created_at: datetime\n    updated_at: datetime\nclass SArtistUpdate(BaseModel):\n    description: Optional[str] = Field(max_length=255)\n\"\"\"\nProducer schemas\n\"\"\"\nclass SProducerBase(BaseModel):",
        "detail": "backend.src.auth.schemas",
        "documentation": {}
    },
    {
        "label": "SArtistUpdate",
        "kind": 6,
        "importPath": "backend.src.auth.schemas",
        "description": "backend.src.auth.schemas",
        "peekOfCode": "class SArtistUpdate(BaseModel):\n    description: Optional[str] = Field(max_length=255)\n\"\"\"\nProducer schemas\n\"\"\"\nclass SProducerBase(BaseModel):\n    user: SUser\n    description: Optional[str]\n    tags: Optional[List[STag]]\nclass SProducer(SProducerBase):",
        "detail": "backend.src.auth.schemas",
        "documentation": {}
    },
    {
        "label": "SProducerBase",
        "kind": 6,
        "importPath": "backend.src.auth.schemas",
        "description": "backend.src.auth.schemas",
        "peekOfCode": "class SProducerBase(BaseModel):\n    user: SUser\n    description: Optional[str]\n    tags: Optional[List[STag]]\nclass SProducer(SProducerBase):\n    id: int\n    created_at: datetime\n    updated_at: datetime\nclass SProducerUpdate(BaseModel):\n    description: Optional[str] = Field(max_length=255)",
        "detail": "backend.src.auth.schemas",
        "documentation": {}
    },
    {
        "label": "SProducer",
        "kind": 6,
        "importPath": "backend.src.auth.schemas",
        "description": "backend.src.auth.schemas",
        "peekOfCode": "class SProducer(SProducerBase):\n    id: int\n    created_at: datetime\n    updated_at: datetime\nclass SProducerUpdate(BaseModel):\n    description: Optional[str] = Field(max_length=255)\n\"\"\"\nAuth schemas\n\"\"\"\nclass SRegisterUser(BaseModel):",
        "detail": "backend.src.auth.schemas",
        "documentation": {}
    },
    {
        "label": "SProducerUpdate",
        "kind": 6,
        "importPath": "backend.src.auth.schemas",
        "description": "backend.src.auth.schemas",
        "peekOfCode": "class SProducerUpdate(BaseModel):\n    description: Optional[str] = Field(max_length=255)\n\"\"\"\nAuth schemas\n\"\"\"\nclass SRegisterUser(BaseModel):\n    username: str = Field(min_length=3, max_length=25)\n    password: str = Field(min_length=5)\n    email: EmailStr\n    roles: List[Role]",
        "detail": "backend.src.auth.schemas",
        "documentation": {}
    },
    {
        "label": "SRegisterUser",
        "kind": 6,
        "importPath": "backend.src.auth.schemas",
        "description": "backend.src.auth.schemas",
        "peekOfCode": "class SRegisterUser(BaseModel):\n    username: str = Field(min_length=3, max_length=25)\n    password: str = Field(min_length=5)\n    email: EmailStr\n    roles: List[Role]\n    birthday: Optional[date]\n    tags: Optional[List[STag]]\nclass SLoginUser(BaseModel):\n    email: EmailStr\n    password: str",
        "detail": "backend.src.auth.schemas",
        "documentation": {}
    },
    {
        "label": "SLoginUser",
        "kind": 6,
        "importPath": "backend.src.auth.schemas",
        "description": "backend.src.auth.schemas",
        "peekOfCode": "class SLoginUser(BaseModel):\n    email: EmailStr\n    password: str",
        "detail": "backend.src.auth.schemas",
        "documentation": {}
    },
    {
        "label": "UsersDAO",
        "kind": 6,
        "importPath": "backend.src.auth.services",
        "description": "backend.src.auth.services",
        "peekOfCode": "class UsersDAO(SQLAlchemyRepository):\n    model = User\nclass ProducerDAO(SQLAlchemyRepository):\n    model = ProducerProfile\nclass ArtistDAO(SQLAlchemyRepository):\n    model = ArtistProfile\nclass RoleDAO(SQLAlchemyRepository):\n    model = Role\nclass UserToRoleDAO(SQLAlchemyRepository):\n    model = user_to_roles_association",
        "detail": "backend.src.auth.services",
        "documentation": {}
    },
    {
        "label": "ProducerDAO",
        "kind": 6,
        "importPath": "backend.src.auth.services",
        "description": "backend.src.auth.services",
        "peekOfCode": "class ProducerDAO(SQLAlchemyRepository):\n    model = ProducerProfile\nclass ArtistDAO(SQLAlchemyRepository):\n    model = ArtistProfile\nclass RoleDAO(SQLAlchemyRepository):\n    model = Role\nclass UserToRoleDAO(SQLAlchemyRepository):\n    model = user_to_roles_association\nclass ListenerTagsDAO(SQLAlchemyRepository):\n    model = listener_tags_association",
        "detail": "backend.src.auth.services",
        "documentation": {}
    },
    {
        "label": "ArtistDAO",
        "kind": 6,
        "importPath": "backend.src.auth.services",
        "description": "backend.src.auth.services",
        "peekOfCode": "class ArtistDAO(SQLAlchemyRepository):\n    model = ArtistProfile\nclass RoleDAO(SQLAlchemyRepository):\n    model = Role\nclass UserToRoleDAO(SQLAlchemyRepository):\n    model = user_to_roles_association\nclass ListenerTagsDAO(SQLAlchemyRepository):\n    model = listener_tags_association\nclass ProducerTagsDAO(SQLAlchemyRepository):\n    model = producer_tags_association",
        "detail": "backend.src.auth.services",
        "documentation": {}
    },
    {
        "label": "RoleDAO",
        "kind": 6,
        "importPath": "backend.src.auth.services",
        "description": "backend.src.auth.services",
        "peekOfCode": "class RoleDAO(SQLAlchemyRepository):\n    model = Role\nclass UserToRoleDAO(SQLAlchemyRepository):\n    model = user_to_roles_association\nclass ListenerTagsDAO(SQLAlchemyRepository):\n    model = listener_tags_association\nclass ProducerTagsDAO(SQLAlchemyRepository):\n    model = producer_tags_association\nclass ArtistTagsDAO(SQLAlchemyRepository):\n    model = artist_tags_association",
        "detail": "backend.src.auth.services",
        "documentation": {}
    },
    {
        "label": "UserToRoleDAO",
        "kind": 6,
        "importPath": "backend.src.auth.services",
        "description": "backend.src.auth.services",
        "peekOfCode": "class UserToRoleDAO(SQLAlchemyRepository):\n    model = user_to_roles_association\nclass ListenerTagsDAO(SQLAlchemyRepository):\n    model = listener_tags_association\nclass ProducerTagsDAO(SQLAlchemyRepository):\n    model = producer_tags_association\nclass ArtistTagsDAO(SQLAlchemyRepository):\n    model = artist_tags_association",
        "detail": "backend.src.auth.services",
        "documentation": {}
    },
    {
        "label": "ListenerTagsDAO",
        "kind": 6,
        "importPath": "backend.src.auth.services",
        "description": "backend.src.auth.services",
        "peekOfCode": "class ListenerTagsDAO(SQLAlchemyRepository):\n    model = listener_tags_association\nclass ProducerTagsDAO(SQLAlchemyRepository):\n    model = producer_tags_association\nclass ArtistTagsDAO(SQLAlchemyRepository):\n    model = artist_tags_association",
        "detail": "backend.src.auth.services",
        "documentation": {}
    },
    {
        "label": "ProducerTagsDAO",
        "kind": 6,
        "importPath": "backend.src.auth.services",
        "description": "backend.src.auth.services",
        "peekOfCode": "class ProducerTagsDAO(SQLAlchemyRepository):\n    model = producer_tags_association\nclass ArtistTagsDAO(SQLAlchemyRepository):\n    model = artist_tags_association",
        "detail": "backend.src.auth.services",
        "documentation": {}
    },
    {
        "label": "ArtistTagsDAO",
        "kind": 6,
        "importPath": "backend.src.auth.services",
        "description": "backend.src.auth.services",
        "peekOfCode": "class ArtistTagsDAO(SQLAlchemyRepository):\n    model = artist_tags_association",
        "detail": "backend.src.auth.services",
        "documentation": {}
    },
    {
        "label": "get_hashed_password",
        "kind": 2,
        "importPath": "backend.src.auth.utils",
        "description": "backend.src.auth.utils",
        "peekOfCode": "def get_hashed_password(password: str) -> str:\n    return password_context.hash(password)\ndef verify_password(password: str, real_hashed_pass: str) -> bool:\n    return password_context.verify(password, real_hashed_pass)\ndef create_access_token(data: dict) -> str:\n    to_encode = data.copy()\n    expires_delta = datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    to_encode.update({\"exp\": expires_delta})\n    encoded_jwt = jwt.encode(\n        to_encode,",
        "detail": "backend.src.auth.utils",
        "documentation": {}
    },
    {
        "label": "verify_password",
        "kind": 2,
        "importPath": "backend.src.auth.utils",
        "description": "backend.src.auth.utils",
        "peekOfCode": "def verify_password(password: str, real_hashed_pass: str) -> bool:\n    return password_context.verify(password, real_hashed_pass)\ndef create_access_token(data: dict) -> str:\n    to_encode = data.copy()\n    expires_delta = datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    to_encode.update({\"exp\": expires_delta})\n    encoded_jwt = jwt.encode(\n        to_encode,\n        JWT_SECRET_KEY,\n        ALGORITHM",
        "detail": "backend.src.auth.utils",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "kind": 2,
        "importPath": "backend.src.auth.utils",
        "description": "backend.src.auth.utils",
        "peekOfCode": "def create_access_token(data: dict) -> str:\n    to_encode = data.copy()\n    expires_delta = datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    to_encode.update({\"exp\": expires_delta})\n    encoded_jwt = jwt.encode(\n        to_encode,\n        JWT_SECRET_KEY,\n        ALGORITHM\n        )\n    return encoded_jwt",
        "detail": "backend.src.auth.utils",
        "documentation": {}
    },
    {
        "label": "create_refresh_token",
        "kind": 2,
        "importPath": "backend.src.auth.utils",
        "description": "backend.src.auth.utils",
        "peekOfCode": "def create_refresh_token(data: dict) -> str:\n    to_encode = data.copy()\n    expires_delta = datetime.utcnow() + timedelta(minutes=REFRESH_TOKEN_EXPIRE_MINUTES)\n    to_encode.update({\"exp\": expires_delta})\n    encoded_jwt = jwt.encode(\n        to_encode,\n        JWT_REFRESH_SECRET_KEY,\n        ALGORITHM\n        )\n    return encoded_jwt",
        "detail": "backend.src.auth.utils",
        "documentation": {}
    },
    {
        "label": "password_context",
        "kind": 5,
        "importPath": "backend.src.auth.utils",
        "description": "backend.src.auth.utils",
        "peekOfCode": "password_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\nACCESS_TOKEN_EXPIRE_MINUTES = 30  # 30 minutes\nREFRESH_TOKEN_EXPIRE_MINUTES = (60 * 24 * 7) * 2 # 14 days\nALGORITHM = \"HS256\"\nJWT_SECRET_KEY = settings.auth.JWT_SECRET_KEY   # should be kept secret\nJWT_REFRESH_SECRET_KEY = settings.auth.JWT_REFRESH_SECRET_KEY   # should be kept secret\nasync def unique_filename(file: UploadFile) -> str:\n    try:\n        file_name, file_extension = os.path.splitext(file.filename)\n        unique_filename = f\"user_picture-{file_name.replace(' ', '-')}_{uuid.uuid4()}{file_extension}\"",
        "detail": "backend.src.auth.utils",
        "documentation": {}
    },
    {
        "label": "ACCESS_TOKEN_EXPIRE_MINUTES",
        "kind": 5,
        "importPath": "backend.src.auth.utils",
        "description": "backend.src.auth.utils",
        "peekOfCode": "ACCESS_TOKEN_EXPIRE_MINUTES = 30  # 30 minutes\nREFRESH_TOKEN_EXPIRE_MINUTES = (60 * 24 * 7) * 2 # 14 days\nALGORITHM = \"HS256\"\nJWT_SECRET_KEY = settings.auth.JWT_SECRET_KEY   # should be kept secret\nJWT_REFRESH_SECRET_KEY = settings.auth.JWT_REFRESH_SECRET_KEY   # should be kept secret\nasync def unique_filename(file: UploadFile) -> str:\n    try:\n        file_name, file_extension = os.path.splitext(file.filename)\n        unique_filename = f\"user_picture-{file_name.replace(' ', '-')}_{uuid.uuid4()}{file_extension}\"\n        return unique_filename",
        "detail": "backend.src.auth.utils",
        "documentation": {}
    },
    {
        "label": "REFRESH_TOKEN_EXPIRE_MINUTES",
        "kind": 5,
        "importPath": "backend.src.auth.utils",
        "description": "backend.src.auth.utils",
        "peekOfCode": "REFRESH_TOKEN_EXPIRE_MINUTES = (60 * 24 * 7) * 2 # 14 days\nALGORITHM = \"HS256\"\nJWT_SECRET_KEY = settings.auth.JWT_SECRET_KEY   # should be kept secret\nJWT_REFRESH_SECRET_KEY = settings.auth.JWT_REFRESH_SECRET_KEY   # should be kept secret\nasync def unique_filename(file: UploadFile) -> str:\n    try:\n        file_name, file_extension = os.path.splitext(file.filename)\n        unique_filename = f\"user_picture-{file_name.replace(' ', '-')}_{uuid.uuid4()}{file_extension}\"\n        return unique_filename\n    except Exception as e:",
        "detail": "backend.src.auth.utils",
        "documentation": {}
    },
    {
        "label": "ALGORITHM",
        "kind": 5,
        "importPath": "backend.src.auth.utils",
        "description": "backend.src.auth.utils",
        "peekOfCode": "ALGORITHM = \"HS256\"\nJWT_SECRET_KEY = settings.auth.JWT_SECRET_KEY   # should be kept secret\nJWT_REFRESH_SECRET_KEY = settings.auth.JWT_REFRESH_SECRET_KEY   # should be kept secret\nasync def unique_filename(file: UploadFile) -> str:\n    try:\n        file_name, file_extension = os.path.splitext(file.filename)\n        unique_filename = f\"user_picture-{file_name.replace(' ', '-')}_{uuid.uuid4()}{file_extension}\"\n        return unique_filename\n    except Exception as e:\n        raise HTTPException(status_code=500, detail=f\"Failed to process the audio file: {str(e)}\")",
        "detail": "backend.src.auth.utils",
        "documentation": {}
    },
    {
        "label": "JWT_SECRET_KEY",
        "kind": 5,
        "importPath": "backend.src.auth.utils",
        "description": "backend.src.auth.utils",
        "peekOfCode": "JWT_SECRET_KEY = settings.auth.JWT_SECRET_KEY   # should be kept secret\nJWT_REFRESH_SECRET_KEY = settings.auth.JWT_REFRESH_SECRET_KEY   # should be kept secret\nasync def unique_filename(file: UploadFile) -> str:\n    try:\n        file_name, file_extension = os.path.splitext(file.filename)\n        unique_filename = f\"user_picture-{file_name.replace(' ', '-')}_{uuid.uuid4()}{file_extension}\"\n        return unique_filename\n    except Exception as e:\n        raise HTTPException(status_code=500, detail=f\"Failed to process the audio file: {str(e)}\")\ndef get_hashed_password(password: str) -> str:",
        "detail": "backend.src.auth.utils",
        "documentation": {}
    },
    {
        "label": "JWT_REFRESH_SECRET_KEY",
        "kind": 5,
        "importPath": "backend.src.auth.utils",
        "description": "backend.src.auth.utils",
        "peekOfCode": "JWT_REFRESH_SECRET_KEY = settings.auth.JWT_REFRESH_SECRET_KEY   # should be kept secret\nasync def unique_filename(file: UploadFile) -> str:\n    try:\n        file_name, file_extension = os.path.splitext(file.filename)\n        unique_filename = f\"user_picture-{file_name.replace(' ', '-')}_{uuid.uuid4()}{file_extension}\"\n        return unique_filename\n    except Exception as e:\n        raise HTTPException(status_code=500, detail=f\"Failed to process the audio file: {str(e)}\")\ndef get_hashed_password(password: str) -> str:\n    return password_context.hash(password)",
        "detail": "backend.src.auth.utils",
        "documentation": {}
    },
    {
        "label": "Beatpack",
        "kind": 6,
        "importPath": "backend.src.beatpacks.models",
        "description": "backend.src.beatpacks.models",
        "peekOfCode": "class Beatpack(Base):\n    __tablename__ = \"beatpacks\"\n    title: Mapped[str] = mapped_column(nullable=False)\n    description: Mapped[str] = mapped_column(nullable=False)    \n    user: Mapped[\"User\"] = relationship(\"User\", secondary=user_to_beatpacks_association_table)\n    beats: Mapped[\"Beat\"] = relationship(\"Beat\", secondary=beats_to_beatpacks_association_table)",
        "detail": "backend.src.beatpacks.models",
        "documentation": {}
    },
    {
        "label": "beats_to_beatpacks_association_table",
        "kind": 5,
        "importPath": "backend.src.beatpacks.models",
        "description": "backend.src.beatpacks.models",
        "peekOfCode": "beats_to_beatpacks_association_table = Table('beats_to_beatpacks_association_table', Base.metadata,\n    Column('beat_id', Integer, ForeignKey('beats.id')),\n    Column('beat_pack_id', Integer, ForeignKey('beatpacks.id'))\n)\nuser_to_beatpacks_association_table = Table('user_to_beatpacks_association_table', Base.metadata,\n    Column('beatpack_id', Integer, ForeignKey('beatpacks.id')),\n    Column('user_id', Integer, ForeignKey('users.id'))\n)\nclass Beatpack(Base):\n    __tablename__ = \"beatpacks\"",
        "detail": "backend.src.beatpacks.models",
        "documentation": {}
    },
    {
        "label": "user_to_beatpacks_association_table",
        "kind": 5,
        "importPath": "backend.src.beatpacks.models",
        "description": "backend.src.beatpacks.models",
        "peekOfCode": "user_to_beatpacks_association_table = Table('user_to_beatpacks_association_table', Base.metadata,\n    Column('beatpack_id', Integer, ForeignKey('beatpacks.id')),\n    Column('user_id', Integer, ForeignKey('users.id'))\n)\nclass Beatpack(Base):\n    __tablename__ = \"beatpacks\"\n    title: Mapped[str] = mapped_column(nullable=False)\n    description: Mapped[str] = mapped_column(nullable=False)    \n    user: Mapped[\"User\"] = relationship(\"User\", secondary=user_to_beatpacks_association_table)\n    beats: Mapped[\"Beat\"] = relationship(\"Beat\", secondary=beats_to_beatpacks_association_table)",
        "detail": "backend.src.beatpacks.models",
        "documentation": {}
    },
    {
        "label": "beatpacks",
        "kind": 5,
        "importPath": "backend.src.beatpacks.router",
        "description": "backend.src.beatpacks.router",
        "peekOfCode": "beatpacks = APIRouter(\n    prefix = \"/beatpacks\",\n    tags = [\"Beatpacks\"]\n)\n@beatpacks.post(\"/my\", summary=\"Packs by current user\")\nasync def get_user_beatpacks(user: SUser = Depends(get_current_user)):\n    response = await BeatpacksRepository.find_all(owner=user)\n    return response\n@beatpacks.get(\"/all\", summary=\"Create new beatpacks\")\nasync def all_beatpacks():",
        "detail": "backend.src.beatpacks.router",
        "documentation": {}
    },
    {
        "label": "SBeatpackBase",
        "kind": 6,
        "importPath": "backend.src.beatpacks.schemas",
        "description": "backend.src.beatpacks.schemas",
        "peekOfCode": "class SBeatpackBase(BaseModel):\n    title: str\n    description: str\n    owner_id: int\n    beats: List[SBeat] = Field(...)\nclass SBeatPackCreate(SBeatpackBase):\n    pass\nclass SBeatPack(SBeatpackBase):\n    id: int\n    liked: bool",
        "detail": "backend.src.beatpacks.schemas",
        "documentation": {}
    },
    {
        "label": "SBeatPackCreate",
        "kind": 6,
        "importPath": "backend.src.beatpacks.schemas",
        "description": "backend.src.beatpacks.schemas",
        "peekOfCode": "class SBeatPackCreate(SBeatpackBase):\n    pass\nclass SBeatPack(SBeatpackBase):\n    id: int\n    liked: bool\n    is_available: bool\n    created_at: datetime\n    class Config:\n        orm_mode = True",
        "detail": "backend.src.beatpacks.schemas",
        "documentation": {}
    },
    {
        "label": "SBeatPack",
        "kind": 6,
        "importPath": "backend.src.beatpacks.schemas",
        "description": "backend.src.beatpacks.schemas",
        "peekOfCode": "class SBeatPack(SBeatpackBase):\n    id: int\n    liked: bool\n    is_available: bool\n    created_at: datetime\n    class Config:\n        orm_mode = True",
        "detail": "backend.src.beatpacks.schemas",
        "documentation": {}
    },
    {
        "label": "BeatpacksRepository",
        "kind": 6,
        "importPath": "backend.src.beatpacks.services",
        "description": "backend.src.beatpacks.services",
        "peekOfCode": "class BeatpacksRepository(SQLAlchemyRepository):\n    model = Beatpack",
        "detail": "backend.src.beatpacks.services",
        "documentation": {}
    },
    {
        "label": "Like",
        "kind": 6,
        "importPath": "backend.src.beats.models",
        "description": "backend.src.beats.models",
        "peekOfCode": "class Like(Base):\n    __tablename__ = \"likes\"\n    beat_id: Mapped[int] = mapped_column(ForeignKey(\"beats.id\"))\nclass Beat(Base):\n    __tablename__ = \"beats\"\n    title: Mapped[str] = mapped_column(nullable=False)\n    description: Mapped[str] = mapped_column(nullable=True)\n    picture_url: Mapped[str] = mapped_column(nullable=True)\n    file_url: Mapped[str] = mapped_column(nullable=False)\n    co_prod: Mapped[str] = mapped_column(nullable=True)",
        "detail": "backend.src.beats.models",
        "documentation": {}
    },
    {
        "label": "Beat",
        "kind": 6,
        "importPath": "backend.src.beats.models",
        "description": "backend.src.beats.models",
        "peekOfCode": "class Beat(Base):\n    __tablename__ = \"beats\"\n    title: Mapped[str] = mapped_column(nullable=False)\n    description: Mapped[str] = mapped_column(nullable=True)\n    picture_url: Mapped[str] = mapped_column(nullable=True)\n    file_url: Mapped[str] = mapped_column(nullable=False)\n    co_prod: Mapped[str] = mapped_column(nullable=True)\n    prod_by: Mapped[str] = mapped_column(nullable=True)\n    type: Mapped[str] = mapped_column(nullable=True)\n    user_id: Mapped[int] = mapped_column(ForeignKey(\"users.id\"))",
        "detail": "backend.src.beats.models",
        "documentation": {}
    },
    {
        "label": "beats",
        "kind": 5,
        "importPath": "backend.src.beats.router",
        "description": "backend.src.beats.router",
        "peekOfCode": "beats = APIRouter(\n    prefix = \"/beats\",\n    tags = [\"Beats\"]\n)\n@beats.get(\"/my\", summary=\"Beats by current user\")\nasync def get_user_beats(user: SUser = Depends(get_current_user)):\n    response = await BeatsRepository.find_all(user=user)\n    return response\n@beats.get(\"\", summary=\"Get all beats\")\nasync def all_beats():",
        "detail": "backend.src.beats.router",
        "documentation": {}
    },
    {
        "label": "SBeatBase",
        "kind": 6,
        "importPath": "backend.src.beats.schemas",
        "description": "backend.src.beats.schemas",
        "peekOfCode": "class SBeatBase(BaseModel):\n    title: str\n    description: Optional[str]\n    picture_url: Optional[str]\n    file_url: str\n    co_prod: Optional[str]\n    prod_by: Optional[str]\n    playlist_id: Optional[int]\n    user_id: int\n    beat_pack_id: Optional[int]",
        "detail": "backend.src.beats.schemas",
        "documentation": {}
    },
    {
        "label": "SBeatUpdate",
        "kind": 6,
        "importPath": "backend.src.beats.schemas",
        "description": "backend.src.beats.schemas",
        "peekOfCode": "class SBeatUpdate(BaseModel):\n    title: Optional[str]\n    description: Optional[str]\n    picture_url: Optional[str]\n    co_prod: Optional[str]\n    prod_by: Optional[str]\nclass SBeatRelease(BaseModel):\n    title: Optional[str]\n    description: Optional[str]\n    co_prod: Optional[str]",
        "detail": "backend.src.beats.schemas",
        "documentation": {}
    },
    {
        "label": "SBeatRelease",
        "kind": 6,
        "importPath": "backend.src.beats.schemas",
        "description": "backend.src.beats.schemas",
        "peekOfCode": "class SBeatRelease(BaseModel):\n    title: Optional[str]\n    description: Optional[str]\n    co_prod: Optional[str]\n    prod_by: Optional[str]\nclass SBeatCreate(SBeatBase):\n    pass\nclass SBeat(SBeatBase):\n    id: int\n    is_available: bool",
        "detail": "backend.src.beats.schemas",
        "documentation": {}
    },
    {
        "label": "SBeatCreate",
        "kind": 6,
        "importPath": "backend.src.beats.schemas",
        "description": "backend.src.beats.schemas",
        "peekOfCode": "class SBeatCreate(SBeatBase):\n    pass\nclass SBeat(SBeatBase):\n    id: int\n    is_available: bool\n    created_at: datetime\n    class Config:\n        orm_mode = True",
        "detail": "backend.src.beats.schemas",
        "documentation": {}
    },
    {
        "label": "SBeat",
        "kind": 6,
        "importPath": "backend.src.beats.schemas",
        "description": "backend.src.beats.schemas",
        "peekOfCode": "class SBeat(SBeatBase):\n    id: int\n    is_available: bool\n    created_at: datetime\n    class Config:\n        orm_mode = True",
        "detail": "backend.src.beats.schemas",
        "documentation": {}
    },
    {
        "label": "BeatsRepository",
        "kind": 6,
        "importPath": "backend.src.beats.services",
        "description": "backend.src.beats.services",
        "peekOfCode": "class BeatsRepository(SQLAlchemyRepository):\n    model = Beat",
        "detail": "backend.src.beats.services",
        "documentation": {}
    },
    {
        "label": "UserComment",
        "kind": 6,
        "importPath": "backend.src.comments.models",
        "description": "backend.src.comments.models",
        "peekOfCode": "class UserComment(Base):\n    __tablename__ = \"user_comments\"\n    description = Mapped[str] = mapped_column()\n    to_whom_id: Mapped[int] = mapped_column(ForeignKey(\"users.id\"))\n    to_whom: Mapped[\"User\"] = relationship(\"User\")  \n    user_id: Mapped[int] = mapped_column(ForeignKey(\"users.id\"))\n    user: Mapped[\"User\"] = relationship(\"User\") \nclass BeatComment(Base):\n    __tablename__ = \"beat_comments\"\n    description = Mapped[str] = mapped_column()",
        "detail": "backend.src.comments.models",
        "documentation": {}
    },
    {
        "label": "BeatComment",
        "kind": 6,
        "importPath": "backend.src.comments.models",
        "description": "backend.src.comments.models",
        "peekOfCode": "class BeatComment(Base):\n    __tablename__ = \"beat_comments\"\n    description = Mapped[str] = mapped_column()\n    beat_id: Mapped[int] = mapped_column(ForeignKey(\"beats.id\"))\n    beat: Mapped[\"Beat\"] = relationship(\"Beat\")  \n    user_id: Mapped[int] = mapped_column(ForeignKey(\"users.id\"))\n    user: Mapped[\"User\"] = relationship(\"User\")  \nclass BeatpackComment(Base):\n    __tablename__ = \"beatpack_comments\"\n    description = Mapped[str] = mapped_column()",
        "detail": "backend.src.comments.models",
        "documentation": {}
    },
    {
        "label": "BeatpackComment",
        "kind": 6,
        "importPath": "backend.src.comments.models",
        "description": "backend.src.comments.models",
        "peekOfCode": "class BeatpackComment(Base):\n    __tablename__ = \"beatpack_comments\"\n    description = Mapped[str] = mapped_column()\n    beatpack_id: Mapped[int] = mapped_column(ForeignKey(\"beatpacks.id\"))\n    beatpack: Mapped[\"Beatpack\"] = relationship(\"Beatpack\") \n    user_id: Mapped[int] = mapped_column(ForeignKey(\"users.id\"))\n    user: Mapped[\"User\"] = relationship(\"User\")",
        "detail": "backend.src.comments.models",
        "documentation": {}
    },
    {
        "label": "beats",
        "kind": 5,
        "importPath": "backend.src.comments.router",
        "description": "backend.src.comments.router",
        "peekOfCode": "beats = APIRouter(\n    prefix = \"/comments\",\n    tags = [\"Comments\"]\n)",
        "detail": "backend.src.comments.router",
        "documentation": {}
    },
    {
        "label": "SBeatBase",
        "kind": 6,
        "importPath": "backend.src.comments.schemas",
        "description": "backend.src.comments.schemas",
        "peekOfCode": "class SBeatBase(BaseModel):\n    title: str\n    picture: Optional[str]\n    description: Optional[str]\n    file_path: str\n    co_prod: Optional[str]\n    prod_by: Optional[str]\n    playlist_id: Optional[int]\n    user_id: int\n    beat_pack_id: Optional[int]",
        "detail": "backend.src.comments.schemas",
        "documentation": {}
    },
    {
        "label": "SBeatCreate",
        "kind": 6,
        "importPath": "backend.src.comments.schemas",
        "description": "backend.src.comments.schemas",
        "peekOfCode": "class SBeatCreate(SBeatBase):\n    pass\nclass SBeat(SBeatBase):\n    id: int\n    is_available: bool\n    created_at: datetime\n    class Config:\n        orm_mode = True\nclass SBeatPackBase(BaseModel):\n    title: str",
        "detail": "backend.src.comments.schemas",
        "documentation": {}
    },
    {
        "label": "SBeat",
        "kind": 6,
        "importPath": "backend.src.comments.schemas",
        "description": "backend.src.comments.schemas",
        "peekOfCode": "class SBeat(SBeatBase):\n    id: int\n    is_available: bool\n    created_at: datetime\n    class Config:\n        orm_mode = True\nclass SBeatPackBase(BaseModel):\n    title: str\n    description: str\n    owner_id: int",
        "detail": "backend.src.comments.schemas",
        "documentation": {}
    },
    {
        "label": "SBeatPackBase",
        "kind": 6,
        "importPath": "backend.src.comments.schemas",
        "description": "backend.src.comments.schemas",
        "peekOfCode": "class SBeatPackBase(BaseModel):\n    title: str\n    description: str\n    owner_id: int\n    beats: List[SBeat] = Field(...)\nclass SBeatPackCreate(SBeatPackBase):\n    pass\nclass SBeatPack(SBeatPackBase):\n    id: int\n    liked: bool",
        "detail": "backend.src.comments.schemas",
        "documentation": {}
    },
    {
        "label": "SBeatPackCreate",
        "kind": 6,
        "importPath": "backend.src.comments.schemas",
        "description": "backend.src.comments.schemas",
        "peekOfCode": "class SBeatPackCreate(SBeatPackBase):\n    pass\nclass SBeatPack(SBeatPackBase):\n    id: int\n    liked: bool\n    is_available: bool\n    created_at: datetime\n    class Config:\n        orm_mode = True",
        "detail": "backend.src.comments.schemas",
        "documentation": {}
    },
    {
        "label": "SBeatPack",
        "kind": 6,
        "importPath": "backend.src.comments.schemas",
        "description": "backend.src.comments.schemas",
        "peekOfCode": "class SBeatPack(SBeatPackBase):\n    id: int\n    liked: bool\n    is_available: bool\n    created_at: datetime\n    class Config:\n        orm_mode = True",
        "detail": "backend.src.comments.schemas",
        "documentation": {}
    },
    {
        "label": "BeatsRepository",
        "kind": 6,
        "importPath": "backend.src.comments.services",
        "description": "backend.src.comments.services",
        "peekOfCode": "class BeatsRepository(SQLAlchemyRepository):\n    model = Beat",
        "detail": "backend.src.comments.services",
        "documentation": {}
    },
    {
        "label": "License",
        "kind": 6,
        "importPath": "backend.src.licenses.models",
        "description": "backend.src.licenses.models",
        "peekOfCode": "class License(Base):\n    __tablename__ = \"licenses\"\n    title: Mapped[str] = mapped_column(nullable=False)\n    price: Mapped[str] = mapped_column(nullable=False)\n    description: Mapped[str] = mapped_column(nullable=False)\n    picture_url: Mapped[str] = mapped_column(nullable=True)\n    user: Mapped[\"User\"] = relationship(\"User\", secondary=user_to_licenses_association)",
        "detail": "backend.src.licenses.models",
        "documentation": {}
    },
    {
        "label": "user_to_licenses_association",
        "kind": 5,
        "importPath": "backend.src.licenses.models",
        "description": "backend.src.licenses.models",
        "peekOfCode": "user_to_licenses_association = Table('user_to_licenses_association', Base.metadata,\n    Column('user_id', Integer, ForeignKey('users.id')),\n    Column('license_id', Integer, ForeignKey('licenses.id')),\n)\nclass License(Base):\n    __tablename__ = \"licenses\"\n    title: Mapped[str] = mapped_column(nullable=False)\n    price: Mapped[str] = mapped_column(nullable=False)\n    description: Mapped[str] = mapped_column(nullable=False)\n    picture_url: Mapped[str] = mapped_column(nullable=True)",
        "detail": "backend.src.licenses.models",
        "documentation": {}
    },
    {
        "label": "licenses",
        "kind": 5,
        "importPath": "backend.src.licenses.router",
        "description": "backend.src.licenses.router",
        "peekOfCode": "licenses = APIRouter(\n    prefix = \"/licenses\",\n    tags = [\"Licenses\"]\n)\n@licenses.post(\"/my\", summary=\"Packs by current user\")\nasync def get_user_licenses(user: SUser = Depends(get_current_user)):\n    response = await LicensesRepository.find_all(owner=user)\n    return response\n@licenses.get(\"/all\", summary=\"Create new licenses\")\nasync def all_licenses():",
        "detail": "backend.src.licenses.router",
        "documentation": {}
    },
    {
        "label": "SLicenseBase",
        "kind": 6,
        "importPath": "backend.src.licenses.schemas",
        "description": "backend.src.licenses.schemas",
        "peekOfCode": "class SLicenseBase(BaseModel):\n    title: str\n    picture: Optional[str]\n    description: Optional[str]\n    file_path: str\n    co_prod: Optional[str]\n    prod_by: Optional[str]\n    playlist_id: Optional[int]\n    user_id: int\n    beat_pack_id: Optional[int]",
        "detail": "backend.src.licenses.schemas",
        "documentation": {}
    },
    {
        "label": "SLicense",
        "kind": 6,
        "importPath": "backend.src.licenses.schemas",
        "description": "backend.src.licenses.schemas",
        "peekOfCode": "class SLicense(SLicenseBase):\n    id: int\n    created_at: datetime\n    updated_at: datetime",
        "detail": "backend.src.licenses.schemas",
        "documentation": {}
    },
    {
        "label": "LicensesRepository",
        "kind": 6,
        "importPath": "backend.src.licenses.services",
        "description": "backend.src.licenses.services",
        "peekOfCode": "class LicensesRepository(SQLAlchemyRepository):\n    model = License",
        "detail": "backend.src.licenses.services",
        "documentation": {}
    },
    {
        "label": "Chat",
        "kind": 6,
        "importPath": "backend.src.messages.models",
        "description": "backend.src.messages.models",
        "peekOfCode": "class Chat(Base):\n    __tablename__ = 'chats'\nclass Message(Base):\n    __tablename__ = 'messages'",
        "detail": "backend.src.messages.models",
        "documentation": {}
    },
    {
        "label": "Message",
        "kind": 6,
        "importPath": "backend.src.messages.models",
        "description": "backend.src.messages.models",
        "peekOfCode": "class Message(Base):\n    __tablename__ = 'messages'",
        "detail": "backend.src.messages.models",
        "documentation": {}
    },
    {
        "label": "messages",
        "kind": 5,
        "importPath": "backend.src.messages.router",
        "description": "backend.src.messages.router",
        "peekOfCode": "messages = APIRouter(\n    prefix = \"/messages\",\n    tags = [\"Messages\"]\n)\n@messages.get(\"/my/\", summary=\"Create new messages\")\nasync def get_spotify_tracks():\n    return MessagesRepository.get_tracks()",
        "detail": "backend.src.messages.router",
        "documentation": {}
    },
    {
        "label": "SMusic",
        "kind": 6,
        "importPath": "backend.src.messages.schemas",
        "description": "backend.src.messages.schemas",
        "peekOfCode": "class SMusic(BaseModel):\n    title: str\n    description: str\n    #author_id: int\n\"\"\"\nclass SMusic(BaseModel):\n    id: str\n    title: str\n    description: str\n    picture: -",
        "detail": "backend.src.messages.schemas",
        "documentation": {}
    },
    {
        "label": "SMusic",
        "kind": 6,
        "importPath": "backend.src.messages.schemas",
        "description": "backend.src.messages.schemas",
        "peekOfCode": "class SMusic(BaseModel):\n    id: str\n    title: str\n    description: str\n    picture: -\n    author_id: int\n    album_id: int\n\"\"\"\nclass SAlbum(BaseModel):\n    id: str",
        "detail": "backend.src.messages.schemas",
        "documentation": {}
    },
    {
        "label": "SAlbum",
        "kind": 6,
        "importPath": "backend.src.messages.schemas",
        "description": "backend.src.messages.schemas",
        "peekOfCode": "class SAlbum(BaseModel):\n    id: str\n    title: str\n    description: str\n    parental_advisory: bool\n    author_id: int",
        "detail": "backend.src.messages.schemas",
        "documentation": {}
    },
    {
        "label": "MessagesRepository",
        "kind": 6,
        "importPath": "backend.src.messages.services",
        "description": "backend.src.messages.services",
        "peekOfCode": "class MessagesRepository(SQLAlchemyRepository):\n    model = Message",
        "detail": "backend.src.messages.services",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "backend.src.music.models",
        "description": "backend.src.music.models",
        "peekOfCode": "Base = declarative_base()",
        "detail": "backend.src.music.models",
        "documentation": {}
    },
    {
        "label": "music",
        "kind": 5,
        "importPath": "backend.src.music.router",
        "description": "backend.src.music.router",
        "peekOfCode": "music = APIRouter(\n    prefix = \"/music\",\n    tags = [\"Inspiration\"]\n)\n@music.get(\"/tracks\", summary=\"Create new music\")\nasync def get_spotify_tracks():\n    return Spotify.get_tracks()\n@music.get(\"/track/{id}\", summary=\"Create new music\")\nasync def get_spotify_track(id):\n    return Spotify.track(id)",
        "detail": "backend.src.music.router",
        "documentation": {}
    },
    {
        "label": "SMusic",
        "kind": 6,
        "importPath": "backend.src.music.schemas",
        "description": "backend.src.music.schemas",
        "peekOfCode": "class SMusic(BaseModel):\n    title: str\n    description: str\n    #author_id: int\n\"\"\"\nclass SMusic(BaseModel):\n    id: str\n    title: str\n    description: str\n    picture: -",
        "detail": "backend.src.music.schemas",
        "documentation": {}
    },
    {
        "label": "SMusic",
        "kind": 6,
        "importPath": "backend.src.music.schemas",
        "description": "backend.src.music.schemas",
        "peekOfCode": "class SMusic(BaseModel):\n    id: str\n    title: str\n    description: str\n    picture: -\n    author_id: int\n    album_id: int\n\"\"\"\nclass SAlbum(BaseModel):\n    id: str",
        "detail": "backend.src.music.schemas",
        "documentation": {}
    },
    {
        "label": "SAlbum",
        "kind": 6,
        "importPath": "backend.src.music.schemas",
        "description": "backend.src.music.schemas",
        "peekOfCode": "class SAlbum(BaseModel):\n    id: str\n    title: str\n    description: str\n    parental_advisory: bool\n    author_id: int",
        "detail": "backend.src.music.schemas",
        "documentation": {}
    },
    {
        "label": "AbstractRepository",
        "kind": 6,
        "importPath": "backend.src.music.services",
        "description": "backend.src.music.services",
        "peekOfCode": "class AbstractRepository(ABC):\n    pass\nclass Spotify(AbstractRepository):\n    sp = spotipy.Spotify(auth_manager=SpotifyClientCredentials(\n            client_id=settings.spotify.CLIENT_ID, \n            client_secret=settings.spotify.CLIENT_SECRET\n        ))\n    @staticmethod\n    def get_tracks(): #artist_id\n        lz_uri = 'spotify:artist:36QJpDe2go2KgaRleHCDTp'",
        "detail": "backend.src.music.services",
        "documentation": {}
    },
    {
        "label": "Spotify",
        "kind": 6,
        "importPath": "backend.src.music.services",
        "description": "backend.src.music.services",
        "peekOfCode": "class Spotify(AbstractRepository):\n    sp = spotipy.Spotify(auth_manager=SpotifyClientCredentials(\n            client_id=settings.spotify.CLIENT_ID, \n            client_secret=settings.spotify.CLIENT_SECRET\n        ))\n    @staticmethod\n    def get_tracks(): #artist_id\n        lz_uri = 'spotify:artist:36QJpDe2go2KgaRleHCDTp'\n        results = Spotify.sp.artist_top_tracks(lz_uri)\n        tracks = []",
        "detail": "backend.src.music.services",
        "documentation": {}
    },
    {
        "label": "Notification",
        "kind": 6,
        "importPath": "backend.src.notifications.models",
        "description": "backend.src.notifications.models",
        "peekOfCode": "class Notification(Base):\n    __tablename__ = \"notifications\"\n    name: Mapped[str] = mapped_column(nullable=False)\n    description: Mapped[str] = mapped_column()",
        "detail": "backend.src.notifications.models",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "backend.src.notifications.models",
        "description": "backend.src.notifications.models",
        "peekOfCode": "Base = declarative_base()\nclass Notification(Base):\n    __tablename__ = \"notifications\"\n    name: Mapped[str] = mapped_column(nullable=False)\n    description: Mapped[str] = mapped_column()",
        "detail": "backend.src.notifications.models",
        "documentation": {}
    },
    {
        "label": "music",
        "kind": 5,
        "importPath": "backend.src.notifications.router",
        "description": "backend.src.notifications.router",
        "peekOfCode": "music = APIRouter(\n    prefix = \"/music\",\n    tags = [\"Music & Albums\"]\n)\n@music.get(\"/tracks\", summary=\"Create new music\")\nasync def get_spotify_tracks():\n    return Spotify.get_tracks()\n@music.get(\"/track/{id}\", summary=\"Create new music\")\nasync def get_spotify_track(id):\n    return Spotify.track(id)",
        "detail": "backend.src.notifications.router",
        "documentation": {}
    },
    {
        "label": "SMusic",
        "kind": 6,
        "importPath": "backend.src.notifications.schemas",
        "description": "backend.src.notifications.schemas",
        "peekOfCode": "class SMusic(BaseModel):\n    title: str\n    description: str\n    #author_id: int\n\"\"\"\nclass SMusic(BaseModel):\n    id: str\n    title: str\n    description: str\n    picture: -",
        "detail": "backend.src.notifications.schemas",
        "documentation": {}
    },
    {
        "label": "SMusic",
        "kind": 6,
        "importPath": "backend.src.notifications.schemas",
        "description": "backend.src.notifications.schemas",
        "peekOfCode": "class SMusic(BaseModel):\n    id: str\n    title: str\n    description: str\n    picture: -\n    author_id: int\n    album_id: int\n\"\"\"\nclass SAlbum(BaseModel):\n    id: str",
        "detail": "backend.src.notifications.schemas",
        "documentation": {}
    },
    {
        "label": "SAlbum",
        "kind": 6,
        "importPath": "backend.src.notifications.schemas",
        "description": "backend.src.notifications.schemas",
        "peekOfCode": "class SAlbum(BaseModel):\n    id: str\n    title: str\n    description: str\n    parental_advisory: bool\n    author_id: int",
        "detail": "backend.src.notifications.schemas",
        "documentation": {}
    },
    {
        "label": "AbstractRepository",
        "kind": 6,
        "importPath": "backend.src.notifications.services",
        "description": "backend.src.notifications.services",
        "peekOfCode": "class AbstractRepository(ABC):\n    pass\nclass Spotify(AbstractRepository):\n    sp = spotipy.Spotify(auth_manager=SpotifyClientCredentials(\n            client_id=settings.spotify.CLIENT_ID, \n            client_secret=settings.spotify.CLIENT_SECRET\n        ))\n    @staticmethod\n    def get_tracks(): #artist_id\n        lz_uri = 'spotify:artist:36QJpDe2go2KgaRleHCDTp'",
        "detail": "backend.src.notifications.services",
        "documentation": {}
    },
    {
        "label": "Spotify",
        "kind": 6,
        "importPath": "backend.src.notifications.services",
        "description": "backend.src.notifications.services",
        "peekOfCode": "class Spotify(AbstractRepository):\n    sp = spotipy.Spotify(auth_manager=SpotifyClientCredentials(\n            client_id=settings.spotify.CLIENT_ID, \n            client_secret=settings.spotify.CLIENT_SECRET\n        ))\n    @staticmethod\n    def get_tracks(): #artist_id\n        lz_uri = 'spotify:artist:36QJpDe2go2KgaRleHCDTp'\n        results = Spotify.sp.artist_top_tracks(lz_uri)\n        tracks = []",
        "detail": "backend.src.notifications.services",
        "documentation": {}
    },
    {
        "label": "send_message",
        "kind": 2,
        "importPath": "backend.src.notifications.utils",
        "description": "backend.src.notifications.utils",
        "peekOfCode": "def send_message(message, to_whom):\n    sender = \"seamusic.official@yandex.com\"\n    password = \"unsp777.\"\n    smtp_server = \"smtp.yandex.com\"\n    smtp_port = 587\n    try:\n        server = smtplib.SMTP(smtp_server, smtp_port)\n        server.starttls()\n        server.login(sender, password)\n        msg = MIMEMultipart()",
        "detail": "backend.src.notifications.utils",
        "documentation": {}
    },
    {
        "label": "search",
        "kind": 5,
        "importPath": "backend.src.search.router",
        "description": "backend.src.search.router",
        "peekOfCode": "search = APIRouter(\n    prefix = \"/search\",\n    tags = [\"Search\"]\n)",
        "detail": "backend.src.search.router",
        "documentation": {}
    },
    {
        "label": "SBeatBase",
        "kind": 6,
        "importPath": "backend.src.search.schemas",
        "description": "backend.src.search.schemas",
        "peekOfCode": "class SBeatBase(BaseModel):\n    title: str\n    picture: Optional[str]\n    description: Optional[str]\n    file_path: str\n    co_prod: Optional[str]\n    prod_by: Optional[str]\n    playlist_id: Optional[int]\n    user_id: int\n    beat_pack_id: Optional[int]",
        "detail": "backend.src.search.schemas",
        "documentation": {}
    },
    {
        "label": "SBeatCreate",
        "kind": 6,
        "importPath": "backend.src.search.schemas",
        "description": "backend.src.search.schemas",
        "peekOfCode": "class SBeatCreate(SBeatBase):\n    pass\nclass SBeat(SBeatBase):\n    id: int\n    is_available: bool\n    created_at: datetime\n    class Config:\n        orm_mode = True\nclass SBeatPackBase(BaseModel):\n    title: str",
        "detail": "backend.src.search.schemas",
        "documentation": {}
    },
    {
        "label": "SBeat",
        "kind": 6,
        "importPath": "backend.src.search.schemas",
        "description": "backend.src.search.schemas",
        "peekOfCode": "class SBeat(SBeatBase):\n    id: int\n    is_available: bool\n    created_at: datetime\n    class Config:\n        orm_mode = True\nclass SBeatPackBase(BaseModel):\n    title: str\n    description: str\n    owner_id: int",
        "detail": "backend.src.search.schemas",
        "documentation": {}
    },
    {
        "label": "SBeatPackBase",
        "kind": 6,
        "importPath": "backend.src.search.schemas",
        "description": "backend.src.search.schemas",
        "peekOfCode": "class SBeatPackBase(BaseModel):\n    title: str\n    description: str\n    owner_id: int\n    beats: List[SBeat] = Field(...)\nclass SBeatPackCreate(SBeatPackBase):\n    pass\nclass SBeatPack(SBeatPackBase):\n    id: int\n    liked: bool",
        "detail": "backend.src.search.schemas",
        "documentation": {}
    },
    {
        "label": "SBeatPackCreate",
        "kind": 6,
        "importPath": "backend.src.search.schemas",
        "description": "backend.src.search.schemas",
        "peekOfCode": "class SBeatPackCreate(SBeatPackBase):\n    pass\nclass SBeatPack(SBeatPackBase):\n    id: int\n    liked: bool\n    is_available: bool\n    created_at: datetime\n    class Config:\n        orm_mode = True",
        "detail": "backend.src.search.schemas",
        "documentation": {}
    },
    {
        "label": "SBeatPack",
        "kind": 6,
        "importPath": "backend.src.search.schemas",
        "description": "backend.src.search.schemas",
        "peekOfCode": "class SBeatPack(SBeatPackBase):\n    id: int\n    liked: bool\n    is_available: bool\n    created_at: datetime\n    class Config:\n        orm_mode = True",
        "detail": "backend.src.search.schemas",
        "documentation": {}
    },
    {
        "label": "BeatsRepository",
        "kind": 6,
        "importPath": "backend.src.search.services",
        "description": "backend.src.search.services",
        "peekOfCode": "class BeatsRepository(SQLAlchemyRepository):\n    model = Beat",
        "detail": "backend.src.search.services",
        "documentation": {}
    },
    {
        "label": "Soundkit",
        "kind": 6,
        "importPath": "backend.src.soundkits.models",
        "description": "backend.src.soundkits.models",
        "peekOfCode": "class Soundkit(Base):\n    __tablename__ = \"soundkits\"\n    name: Mapped[str] = mapped_column(nullable=False)\n    description: Mapped[str] = mapped_column(nullable=True)\n    picture_url: Mapped[str] = mapped_column(nullable=True)\n    file_url: Mapped[str] = mapped_column(nullable=False)\n    user_id: Mapped[int] = mapped_column(ForeignKey(\"users.id\"))\n    user: Mapped[\"User\"] = relationship(\"User\") \nuser_to_soundkits_association_table = Table('user_to_soundkits_association_table', Base.metadata,\n    Column('soundkit_id', Integer, ForeignKey('soundkits.id')),",
        "detail": "backend.src.soundkits.models",
        "documentation": {}
    },
    {
        "label": "user_to_soundkits_association_table",
        "kind": 5,
        "importPath": "backend.src.soundkits.models",
        "description": "backend.src.soundkits.models",
        "peekOfCode": "user_to_soundkits_association_table = Table('user_to_soundkits_association_table', Base.metadata,\n    Column('soundkit_id', Integer, ForeignKey('soundkits.id')),\n    Column('user_id', Integer, ForeignKey('users.id'))\n)",
        "detail": "backend.src.soundkits.models",
        "documentation": {}
    },
    {
        "label": "soundkits",
        "kind": 5,
        "importPath": "backend.src.soundkits.router",
        "description": "backend.src.soundkits.router",
        "peekOfCode": "soundkits = APIRouter(\n    prefix = \"/soundkits\",\n    tags = [\"Sound-kits\"]\n)\n@soundkits.get(\"/my\", summary=\"soundkits by current user\")\nasync def get_user_soundkits(user: SUser = Depends(get_current_user)):\n    response = await SoundkitRepository.find_all(user=user)\n    return response\n@soundkits.get(\"\", summary=\"Get all soundkits\")\nasync def all_soundkits():",
        "detail": "backend.src.soundkits.router",
        "documentation": {}
    },
    {
        "label": "SSoundkitBase",
        "kind": 6,
        "importPath": "backend.src.soundkits.schemas",
        "description": "backend.src.soundkits.schemas",
        "peekOfCode": "class SSoundkitBase(BaseModel):\n    title: str\n    picture: Optional[str]\n    description: Optional[str]\n    file_path: str\n    co_prod: Optional[str]\n    prod_by: Optional[str]\n    playlist_id: Optional[int]\n    user_id: int\n    beat_pack_id: Optional[int]",
        "detail": "backend.src.soundkits.schemas",
        "documentation": {}
    },
    {
        "label": "SSoundkitUpdate",
        "kind": 6,
        "importPath": "backend.src.soundkits.schemas",
        "description": "backend.src.soundkits.schemas",
        "peekOfCode": "class SSoundkitUpdate(BaseModel):\n    title: Optional[str]\n    picture: Optional[str]\n    description: Optional[str]\n    co_prod: Optional[str]\n    prod_by: Optional[str]\nclass SSoundkitCreate(SSoundkitBase):\n    pass\nclass SSoundkit(SSoundkitBase):\n    id: int",
        "detail": "backend.src.soundkits.schemas",
        "documentation": {}
    },
    {
        "label": "SSoundkitCreate",
        "kind": 6,
        "importPath": "backend.src.soundkits.schemas",
        "description": "backend.src.soundkits.schemas",
        "peekOfCode": "class SSoundkitCreate(SSoundkitBase):\n    pass\nclass SSoundkit(SSoundkitBase):\n    id: int\n    is_available: bool\n    created_at: datetime\n    class Config:\n        orm_mode = True",
        "detail": "backend.src.soundkits.schemas",
        "documentation": {}
    },
    {
        "label": "SSoundkit",
        "kind": 6,
        "importPath": "backend.src.soundkits.schemas",
        "description": "backend.src.soundkits.schemas",
        "peekOfCode": "class SSoundkit(SSoundkitBase):\n    id: int\n    is_available: bool\n    created_at: datetime\n    class Config:\n        orm_mode = True",
        "detail": "backend.src.soundkits.schemas",
        "documentation": {}
    },
    {
        "label": "SoundkitRepository",
        "kind": 6,
        "importPath": "backend.src.soundkits.services",
        "description": "backend.src.soundkits.services",
        "peekOfCode": "class SoundkitRepository(SQLAlchemyRepository):\n    model = Soundkit",
        "detail": "backend.src.soundkits.services",
        "documentation": {}
    },
    {
        "label": "Squad",
        "kind": 6,
        "importPath": "backend.src.squads.models",
        "description": "backend.src.squads.models",
        "peekOfCode": "class Squad(Base):\n    __tablename__ = \"squads\"\n    name: Mapped[str] = mapped_column(nullable=False)\n    picture: Mapped[str] = mapped_column(nullable=True)\n    description: Mapped[str] = mapped_column(nullable=True)\n    file_path: Mapped[str] = mapped_column(nullable=False)\n    co_prod: Mapped[str] = mapped_column(nullable=True)\n    prod_by: Mapped[str] = mapped_column(nullable=True)\n    artist_profiles: Mapped[List[\"ArtistProfile\"]] = relationship(secondary=squad_artist_profile_association, back_populates=\"squads\")\n    producer_profiles: Mapped[List[\"ProducerProfile\"]] = relationship(secondary=squad_producer_profile_association, back_populates=\"squads\")",
        "detail": "backend.src.squads.models",
        "documentation": {}
    },
    {
        "label": "squad_artist_profile_association",
        "kind": 5,
        "importPath": "backend.src.squads.models",
        "description": "backend.src.squads.models",
        "peekOfCode": "squad_artist_profile_association = Table('squad_artist_profile_association', Base.metadata,\n    Column('squad_id', Integer, ForeignKey('squads.id')),\n    Column('artist_profile_id', Integer, ForeignKey('artist_profiles.id'))\n)\nsquad_producer_profile_association = Table('squad_producer_profile_association', Base.metadata,\n    Column('squad_id', Integer, ForeignKey('squads.id')),\n    Column('producer_profile_id', Integer, ForeignKey('producer_profiles.id'))\n)\nclass Squad(Base):\n    __tablename__ = \"squads\"",
        "detail": "backend.src.squads.models",
        "documentation": {}
    },
    {
        "label": "squad_producer_profile_association",
        "kind": 5,
        "importPath": "backend.src.squads.models",
        "description": "backend.src.squads.models",
        "peekOfCode": "squad_producer_profile_association = Table('squad_producer_profile_association', Base.metadata,\n    Column('squad_id', Integer, ForeignKey('squads.id')),\n    Column('producer_profile_id', Integer, ForeignKey('producer_profiles.id'))\n)\nclass Squad(Base):\n    __tablename__ = \"squads\"\n    name: Mapped[str] = mapped_column(nullable=False)\n    picture: Mapped[str] = mapped_column(nullable=True)\n    description: Mapped[str] = mapped_column(nullable=True)\n    file_path: Mapped[str] = mapped_column(nullable=False)",
        "detail": "backend.src.squads.models",
        "documentation": {}
    },
    {
        "label": "squads",
        "kind": 5,
        "importPath": "backend.src.squads.router",
        "description": "backend.src.squads.router",
        "peekOfCode": "squads = APIRouter(\n    prefix = \"/squads\",\n    tags = [\"Squads\"]\n)",
        "detail": "backend.src.squads.router",
        "documentation": {}
    },
    {
        "label": "SBeatBase",
        "kind": 6,
        "importPath": "backend.src.squads.schemas",
        "description": "backend.src.squads.schemas",
        "peekOfCode": "class SBeatBase(BaseModel):\n    title: str\n    picture: Optional[str]\n    description: Optional[str]\n    file_path: str\n    co_prod: Optional[str]\n    prod_by: Optional[str]\n    playlist_id: Optional[int]\n    user_id: int\n    beat_pack_id: Optional[int]",
        "detail": "backend.src.squads.schemas",
        "documentation": {}
    },
    {
        "label": "SBeatCreate",
        "kind": 6,
        "importPath": "backend.src.squads.schemas",
        "description": "backend.src.squads.schemas",
        "peekOfCode": "class SBeatCreate(SBeatBase):\n    pass\nclass SBeat(SBeatBase):\n    id: int\n    is_available: bool\n    created_at: datetime\n    class Config:\n        orm_mode = True\nclass SBeatPackBase(BaseModel):\n    title: str",
        "detail": "backend.src.squads.schemas",
        "documentation": {}
    },
    {
        "label": "SBeat",
        "kind": 6,
        "importPath": "backend.src.squads.schemas",
        "description": "backend.src.squads.schemas",
        "peekOfCode": "class SBeat(SBeatBase):\n    id: int\n    is_available: bool\n    created_at: datetime\n    class Config:\n        orm_mode = True\nclass SBeatPackBase(BaseModel):\n    title: str\n    description: str\n    owner_id: int",
        "detail": "backend.src.squads.schemas",
        "documentation": {}
    },
    {
        "label": "SBeatPackBase",
        "kind": 6,
        "importPath": "backend.src.squads.schemas",
        "description": "backend.src.squads.schemas",
        "peekOfCode": "class SBeatPackBase(BaseModel):\n    title: str\n    description: str\n    owner_id: int\n    beats: List[SBeat] = Field(...)\nclass SBeatPackCreate(SBeatPackBase):\n    pass\nclass SBeatPack(SBeatPackBase):\n    id: int\n    liked: bool",
        "detail": "backend.src.squads.schemas",
        "documentation": {}
    },
    {
        "label": "SBeatPackCreate",
        "kind": 6,
        "importPath": "backend.src.squads.schemas",
        "description": "backend.src.squads.schemas",
        "peekOfCode": "class SBeatPackCreate(SBeatPackBase):\n    pass\nclass SBeatPack(SBeatPackBase):\n    id: int\n    liked: bool\n    is_available: bool\n    created_at: datetime\n    class Config:\n        orm_mode = True",
        "detail": "backend.src.squads.schemas",
        "documentation": {}
    },
    {
        "label": "SBeatPack",
        "kind": 6,
        "importPath": "backend.src.squads.schemas",
        "description": "backend.src.squads.schemas",
        "peekOfCode": "class SBeatPack(SBeatPackBase):\n    id: int\n    liked: bool\n    is_available: bool\n    created_at: datetime\n    class Config:\n        orm_mode = True",
        "detail": "backend.src.squads.schemas",
        "documentation": {}
    },
    {
        "label": "SquadRepository",
        "kind": 6,
        "importPath": "backend.src.squads.services",
        "description": "backend.src.squads.services",
        "peekOfCode": "class SquadRepository(SQLAlchemyRepository):\n    model = Squad",
        "detail": "backend.src.squads.services",
        "documentation": {}
    },
    {
        "label": "OnlyTelegramSubscribeMonth",
        "kind": 6,
        "importPath": "backend.src.subscription.models",
        "description": "backend.src.subscription.models",
        "peekOfCode": "class OnlyTelegramSubscribeMonth(Base):\n    __tablename__ = 'only_telegram_subscribe_month'\n    telegram_id: Mapped[str] = mapped_column(nullable=False)\n    subscribe: Mapped[bool] = mapped_column(nullable=False, default=False)\n    telegram_account_id = Column(Integer, ForeignKey('telegram_accounts.id'))\n    telegram_account = relationship(\"TelegramAccount\", back_populates=\"only_telegram_subscribe_month\")\nclass OnlyTelegramSubscribeYear(Base):\n    __tablename__ = 'only_telegram_subscribe_year'\n    telegram_id: Mapped[str] = mapped_column(nullable=False)\n    subscribe: Mapped[bool] = mapped_column(nullable=False, default=False)",
        "detail": "backend.src.subscription.models",
        "documentation": {}
    },
    {
        "label": "OnlyTelegramSubscribeYear",
        "kind": 6,
        "importPath": "backend.src.subscription.models",
        "description": "backend.src.subscription.models",
        "peekOfCode": "class OnlyTelegramSubscribeYear(Base):\n    __tablename__ = 'only_telegram_subscribe_year'\n    telegram_id: Mapped[str] = mapped_column(nullable=False)\n    subscribe: Mapped[bool] = mapped_column(nullable=False, default=False)\n    telegram_account_id = Column(Integer, ForeignKey('telegram_accounts.id'))\n    telegram_account = relationship(\"TelegramAccount\", back_populates=\"only_telegram_subscribe_year\")\nclass TelegramAccount(Base):\n    __tablename__ = 'telegram_accounts'\n    telegram_id: Mapped[str] = mapped_column(nullable=False)\n    subscribe: Mapped[bool] = mapped_column(nullable=False, default=False)",
        "detail": "backend.src.subscription.models",
        "documentation": {}
    },
    {
        "label": "TelegramAccount",
        "kind": 6,
        "importPath": "backend.src.subscription.models",
        "description": "backend.src.subscription.models",
        "peekOfCode": "class TelegramAccount(Base):\n    __tablename__ = 'telegram_accounts'\n    telegram_id: Mapped[str] = mapped_column(nullable=False)\n    subscribe: Mapped[bool] = mapped_column(nullable=False, default=False)\n    only_telegram_subscribe_year: Mapped[\"OnlyTelegramSubscribeYear\"] = relationship(back_populates=\"telegram_account\")\n    only_telegram_subscribe_month: Mapped[\"OnlyTelegramSubscribeMonth\"] = relationship(back_populates=\"telegram_account\")",
        "detail": "backend.src.subscription.models",
        "documentation": {}
    },
    {
        "label": "subscription",
        "kind": 5,
        "importPath": "backend.src.subscription.router",
        "description": "backend.src.subscription.router",
        "peekOfCode": "subscription = APIRouter(\n    prefix = \"/subscription\",\n    tags = [\"Subscription\"]\n)\n@subscription.get('/telegram/{id}', summary='Create telegram subcription account')\nasync def create_telegram_account(id: int):\n    user = await TelegramAccountDAO.find_one_or_none(telegram_id=id)\n    if not user:\n        return await TelegramAccountDAO.add_one(telegram_id=id)\n@subscription.get('/telegram/{id}', summary='Create telegram subcription account')",
        "detail": "backend.src.subscription.router",
        "documentation": {}
    },
    {
        "label": "Role",
        "kind": 6,
        "importPath": "backend.src.subscription.schemas",
        "description": "backend.src.subscription.schemas",
        "peekOfCode": "class Role(str, Enum):\n    Artist = \"Artist\"\n    Producer = \"Producer\"\n    Listener = \"Listener\"\nclass SUserBase(BaseModel):\n    username: str = Field(min_length=5, max_length=25)\n    email: EmailStr\n    picture_url: Optional[str]\n    birthday: Optional[date]\n    role: Role",
        "detail": "backend.src.subscription.schemas",
        "documentation": {}
    },
    {
        "label": "SUserBase",
        "kind": 6,
        "importPath": "backend.src.subscription.schemas",
        "description": "backend.src.subscription.schemas",
        "peekOfCode": "class SUserBase(BaseModel):\n    username: str = Field(min_length=5, max_length=25)\n    email: EmailStr\n    picture_url: Optional[str]\n    birthday: Optional[date]\n    role: Role\nclass SUser(SUserBase):\n    id: int\n    created_at: datetime\n    updated_at: datetime",
        "detail": "backend.src.subscription.schemas",
        "documentation": {}
    },
    {
        "label": "SUser",
        "kind": 6,
        "importPath": "backend.src.subscription.schemas",
        "description": "backend.src.subscription.schemas",
        "peekOfCode": "class SUser(SUserBase):\n    id: int\n    created_at: datetime\n    updated_at: datetime\nclass SUserUpdate(BaseModel):\n    username: Optional[str] = Field(min_length=5, max_length=25)\n    email: Optional[EmailStr]\n    picture_url: Optional[str]\nclass SArtistBase(BaseModel):\n    user: SUser",
        "detail": "backend.src.subscription.schemas",
        "documentation": {}
    },
    {
        "label": "SUserUpdate",
        "kind": 6,
        "importPath": "backend.src.subscription.schemas",
        "description": "backend.src.subscription.schemas",
        "peekOfCode": "class SUserUpdate(BaseModel):\n    username: Optional[str] = Field(min_length=5, max_length=25)\n    email: Optional[EmailStr]\n    picture_url: Optional[str]\nclass SArtistBase(BaseModel):\n    user: SUser\n    description: Optional[str]\nclass SArtist(SArtistBase):\n    id: int\n    created_at: datetime",
        "detail": "backend.src.subscription.schemas",
        "documentation": {}
    },
    {
        "label": "SArtistBase",
        "kind": 6,
        "importPath": "backend.src.subscription.schemas",
        "description": "backend.src.subscription.schemas",
        "peekOfCode": "class SArtistBase(BaseModel):\n    user: SUser\n    description: Optional[str]\nclass SArtist(SArtistBase):\n    id: int\n    created_at: datetime\n    updated_at: datetime\nclass SProducerBase(BaseModel):\n    user_id: int\n    user: SUser",
        "detail": "backend.src.subscription.schemas",
        "documentation": {}
    },
    {
        "label": "SArtist",
        "kind": 6,
        "importPath": "backend.src.subscription.schemas",
        "description": "backend.src.subscription.schemas",
        "peekOfCode": "class SArtist(SArtistBase):\n    id: int\n    created_at: datetime\n    updated_at: datetime\nclass SProducerBase(BaseModel):\n    user_id: int\n    user: SUser\n    description: Optional[str]\nclass SProducer(SProducerBase):\n    id: int",
        "detail": "backend.src.subscription.schemas",
        "documentation": {}
    },
    {
        "label": "SProducerBase",
        "kind": 6,
        "importPath": "backend.src.subscription.schemas",
        "description": "backend.src.subscription.schemas",
        "peekOfCode": "class SProducerBase(BaseModel):\n    user_id: int\n    user: SUser\n    description: Optional[str]\nclass SProducer(SProducerBase):\n    id: int\n    created_at: datetime\n    updated_at: datetime\nclass SRegisterUser(BaseModel):\n    username: str = Field(min_length=5, max_length=25)",
        "detail": "backend.src.subscription.schemas",
        "documentation": {}
    },
    {
        "label": "SProducer",
        "kind": 6,
        "importPath": "backend.src.subscription.schemas",
        "description": "backend.src.subscription.schemas",
        "peekOfCode": "class SProducer(SProducerBase):\n    id: int\n    created_at: datetime\n    updated_at: datetime\nclass SRegisterUser(BaseModel):\n    username: str = Field(min_length=5, max_length=25)\n    email: EmailStr\n    birthday: Optional[date]\n    password: str\n    role: Role",
        "detail": "backend.src.subscription.schemas",
        "documentation": {}
    },
    {
        "label": "SRegisterUser",
        "kind": 6,
        "importPath": "backend.src.subscription.schemas",
        "description": "backend.src.subscription.schemas",
        "peekOfCode": "class SRegisterUser(BaseModel):\n    username: str = Field(min_length=5, max_length=25)\n    email: EmailStr\n    birthday: Optional[date]\n    password: str\n    role: Role\nclass SLoginUser(BaseModel):\n    email: EmailStr\n    password: str\nclass SUserResponse(BaseModel):",
        "detail": "backend.src.subscription.schemas",
        "documentation": {}
    },
    {
        "label": "SLoginUser",
        "kind": 6,
        "importPath": "backend.src.subscription.schemas",
        "description": "backend.src.subscription.schemas",
        "peekOfCode": "class SLoginUser(BaseModel):\n    email: EmailStr\n    password: str\nclass SUserResponse(BaseModel):\n    id: int",
        "detail": "backend.src.subscription.schemas",
        "documentation": {}
    },
    {
        "label": "SUserResponse",
        "kind": 6,
        "importPath": "backend.src.subscription.schemas",
        "description": "backend.src.subscription.schemas",
        "peekOfCode": "class SUserResponse(BaseModel):\n    id: int",
        "detail": "backend.src.subscription.schemas",
        "documentation": {}
    },
    {
        "label": "TelegramAccountDAO",
        "kind": 6,
        "importPath": "backend.src.subscription.services",
        "description": "backend.src.subscription.services",
        "peekOfCode": "class TelegramAccountDAO(SQLAlchemyRepository):\n    model = TelegramAccount",
        "detail": "backend.src.subscription.services",
        "documentation": {}
    },
    {
        "label": "get_hashed_password",
        "kind": 2,
        "importPath": "backend.src.subscription.utils",
        "description": "backend.src.subscription.utils",
        "peekOfCode": "def get_hashed_password(password: str) -> str:\n    return password_context.hash(password)\ndef verify_password(password: str, real_hashed_pass: str) -> bool:\n    return password_context.verify(password, real_hashed_pass)\ndef create_access_token(data: dict) -> str:\n    to_encode = data.copy()\n    expires_delta = datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    to_encode.update({\"exp\": expires_delta})\n    encoded_jwt = jwt.encode(\n        to_encode,",
        "detail": "backend.src.subscription.utils",
        "documentation": {}
    },
    {
        "label": "verify_password",
        "kind": 2,
        "importPath": "backend.src.subscription.utils",
        "description": "backend.src.subscription.utils",
        "peekOfCode": "def verify_password(password: str, real_hashed_pass: str) -> bool:\n    return password_context.verify(password, real_hashed_pass)\ndef create_access_token(data: dict) -> str:\n    to_encode = data.copy()\n    expires_delta = datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    to_encode.update({\"exp\": expires_delta})\n    encoded_jwt = jwt.encode(\n        to_encode,\n        JWT_SECRET_KEY,\n        ALGORITHM",
        "detail": "backend.src.subscription.utils",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "kind": 2,
        "importPath": "backend.src.subscription.utils",
        "description": "backend.src.subscription.utils",
        "peekOfCode": "def create_access_token(data: dict) -> str:\n    to_encode = data.copy()\n    expires_delta = datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    to_encode.update({\"exp\": expires_delta})\n    encoded_jwt = jwt.encode(\n        to_encode,\n        JWT_SECRET_KEY,\n        ALGORITHM\n        )\n    return encoded_jwt",
        "detail": "backend.src.subscription.utils",
        "documentation": {}
    },
    {
        "label": "create_refresh_token",
        "kind": 2,
        "importPath": "backend.src.subscription.utils",
        "description": "backend.src.subscription.utils",
        "peekOfCode": "def create_refresh_token(data: dict) -> str:\n    to_encode = data.copy()\n    expires_delta = datetime.utcnow() + timedelta(minutes=REFRESH_TOKEN_EXPIRE_MINUTES)\n    to_encode.update({\"exp\": expires_delta})\n    encoded_jwt = jwt.encode(\n        to_encode,\n        JWT_REFRESH_SECRET_KEY,\n        ALGORITHM\n        )\n    return encoded_jwt",
        "detail": "backend.src.subscription.utils",
        "documentation": {}
    },
    {
        "label": "password_context",
        "kind": 5,
        "importPath": "backend.src.subscription.utils",
        "description": "backend.src.subscription.utils",
        "peekOfCode": "password_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\nACCESS_TOKEN_EXPIRE_MINUTES = 30  # 30 minutes\nREFRESH_TOKEN_EXPIRE_MINUTES = (60 * 24 * 7) * 2 # 14 days\nALGORITHM = \"HS256\"\nJWT_SECRET_KEY = settings.auth.JWT_SECRET_KEY   # should be kept secret\nJWT_REFRESH_SECRET_KEY = settings.auth.JWT_REFRESH_SECRET_KEY   # should be kept secret\nasync def unique_filename(file: UploadFile) -> str:\n    try:\n        file_name, file_extension = os.path.splitext(file.filename)\n        unique_filename = f\"user_picture-{file_name.replace(' ', '-')}_{uuid.uuid4()}{file_extension}\"",
        "detail": "backend.src.subscription.utils",
        "documentation": {}
    },
    {
        "label": "ACCESS_TOKEN_EXPIRE_MINUTES",
        "kind": 5,
        "importPath": "backend.src.subscription.utils",
        "description": "backend.src.subscription.utils",
        "peekOfCode": "ACCESS_TOKEN_EXPIRE_MINUTES = 30  # 30 minutes\nREFRESH_TOKEN_EXPIRE_MINUTES = (60 * 24 * 7) * 2 # 14 days\nALGORITHM = \"HS256\"\nJWT_SECRET_KEY = settings.auth.JWT_SECRET_KEY   # should be kept secret\nJWT_REFRESH_SECRET_KEY = settings.auth.JWT_REFRESH_SECRET_KEY   # should be kept secret\nasync def unique_filename(file: UploadFile) -> str:\n    try:\n        file_name, file_extension = os.path.splitext(file.filename)\n        unique_filename = f\"user_picture-{file_name.replace(' ', '-')}_{uuid.uuid4()}{file_extension}\"\n        return unique_filename",
        "detail": "backend.src.subscription.utils",
        "documentation": {}
    },
    {
        "label": "REFRESH_TOKEN_EXPIRE_MINUTES",
        "kind": 5,
        "importPath": "backend.src.subscription.utils",
        "description": "backend.src.subscription.utils",
        "peekOfCode": "REFRESH_TOKEN_EXPIRE_MINUTES = (60 * 24 * 7) * 2 # 14 days\nALGORITHM = \"HS256\"\nJWT_SECRET_KEY = settings.auth.JWT_SECRET_KEY   # should be kept secret\nJWT_REFRESH_SECRET_KEY = settings.auth.JWT_REFRESH_SECRET_KEY   # should be kept secret\nasync def unique_filename(file: UploadFile) -> str:\n    try:\n        file_name, file_extension = os.path.splitext(file.filename)\n        unique_filename = f\"user_picture-{file_name.replace(' ', '-')}_{uuid.uuid4()}{file_extension}\"\n        return unique_filename\n    except Exception as e:",
        "detail": "backend.src.subscription.utils",
        "documentation": {}
    },
    {
        "label": "ALGORITHM",
        "kind": 5,
        "importPath": "backend.src.subscription.utils",
        "description": "backend.src.subscription.utils",
        "peekOfCode": "ALGORITHM = \"HS256\"\nJWT_SECRET_KEY = settings.auth.JWT_SECRET_KEY   # should be kept secret\nJWT_REFRESH_SECRET_KEY = settings.auth.JWT_REFRESH_SECRET_KEY   # should be kept secret\nasync def unique_filename(file: UploadFile) -> str:\n    try:\n        file_name, file_extension = os.path.splitext(file.filename)\n        unique_filename = f\"user_picture-{file_name.replace(' ', '-')}_{uuid.uuid4()}{file_extension}\"\n        return unique_filename\n    except Exception as e:\n        raise HTTPException(status_code=500, detail=f\"Failed to process the audio file: {str(e)}\")",
        "detail": "backend.src.subscription.utils",
        "documentation": {}
    },
    {
        "label": "JWT_SECRET_KEY",
        "kind": 5,
        "importPath": "backend.src.subscription.utils",
        "description": "backend.src.subscription.utils",
        "peekOfCode": "JWT_SECRET_KEY = settings.auth.JWT_SECRET_KEY   # should be kept secret\nJWT_REFRESH_SECRET_KEY = settings.auth.JWT_REFRESH_SECRET_KEY   # should be kept secret\nasync def unique_filename(file: UploadFile) -> str:\n    try:\n        file_name, file_extension = os.path.splitext(file.filename)\n        unique_filename = f\"user_picture-{file_name.replace(' ', '-')}_{uuid.uuid4()}{file_extension}\"\n        return unique_filename\n    except Exception as e:\n        raise HTTPException(status_code=500, detail=f\"Failed to process the audio file: {str(e)}\")\ndef get_hashed_password(password: str) -> str:",
        "detail": "backend.src.subscription.utils",
        "documentation": {}
    },
    {
        "label": "JWT_REFRESH_SECRET_KEY",
        "kind": 5,
        "importPath": "backend.src.subscription.utils",
        "description": "backend.src.subscription.utils",
        "peekOfCode": "JWT_REFRESH_SECRET_KEY = settings.auth.JWT_REFRESH_SECRET_KEY   # should be kept secret\nasync def unique_filename(file: UploadFile) -> str:\n    try:\n        file_name, file_extension = os.path.splitext(file.filename)\n        unique_filename = f\"user_picture-{file_name.replace(' ', '-')}_{uuid.uuid4()}{file_extension}\"\n        return unique_filename\n    except Exception as e:\n        raise HTTPException(status_code=500, detail=f\"Failed to process the audio file: {str(e)}\")\ndef get_hashed_password(password: str) -> str:\n    return password_context.hash(password)",
        "detail": "backend.src.subscription.utils",
        "documentation": {}
    },
    {
        "label": "Tag",
        "kind": 6,
        "importPath": "backend.src.tags.models",
        "description": "backend.src.tags.models",
        "peekOfCode": "class Tag(Base):\n    __tablename__ = 'tags'\n    name: Mapped[str] = mapped_column(nullable=False)\n    artist_profiles: Mapped[List[\"ArtistProfile\"]] = relationship(secondary=artist_tags_association, back_populates=\"tags\")\n    producer_profiles: Mapped[List[\"ProducerProfile\"]] = relationship(secondary=producer_tags_association, back_populates=\"tags\")\n    listener_profiles: Mapped[List[\"User\"]] = relationship(secondary=listener_tags_association, back_populates=\"tags\")",
        "detail": "backend.src.tags.models",
        "documentation": {}
    },
    {
        "label": "producer_tags_association",
        "kind": 5,
        "importPath": "backend.src.tags.models",
        "description": "backend.src.tags.models",
        "peekOfCode": "producer_tags_association = Table(\n    'producer_tags_association',\n    Base.metadata,\n    Column('producer_profile_id', Integer, ForeignKey('producer_profiles.id')),\n    Column('tag_id', Integer, ForeignKey('tags.id'))\n)\nartist_tags_association = Table(\n    'artist_tags_association',\n    Base.metadata,\n    Column('artist_profile_id', Integer, ForeignKey('artist_profiles.id')),",
        "detail": "backend.src.tags.models",
        "documentation": {}
    },
    {
        "label": "artist_tags_association",
        "kind": 5,
        "importPath": "backend.src.tags.models",
        "description": "backend.src.tags.models",
        "peekOfCode": "artist_tags_association = Table(\n    'artist_tags_association',\n    Base.metadata,\n    Column('artist_profile_id', Integer, ForeignKey('artist_profiles.id')),\n    Column('tag_id', Integer, ForeignKey('tags.id'))\n)\nlistener_tags_association = Table(\n    'listener_tags_association',\n    Base.metadata,\n    Column('user_id', Integer, ForeignKey('users.id')),",
        "detail": "backend.src.tags.models",
        "documentation": {}
    },
    {
        "label": "listener_tags_association",
        "kind": 5,
        "importPath": "backend.src.tags.models",
        "description": "backend.src.tags.models",
        "peekOfCode": "listener_tags_association = Table(\n    'listener_tags_association',\n    Base.metadata,\n    Column('user_id', Integer, ForeignKey('users.id')),\n    Column('tag_id', Integer, ForeignKey('tags.id'))\n)\nclass Tag(Base):\n    __tablename__ = 'tags'\n    name: Mapped[str] = mapped_column(nullable=False)\n    artist_profiles: Mapped[List[\"ArtistProfile\"]] = relationship(secondary=artist_tags_association, back_populates=\"tags\")",
        "detail": "backend.src.tags.models",
        "documentation": {}
    },
    {
        "label": "tags",
        "kind": 5,
        "importPath": "backend.src.tags.router",
        "description": "backend.src.tags.router",
        "peekOfCode": "tags = APIRouter(\n    prefix = \"/tags\",\n    tags = [\"All tags\"]\n)\n@tags.post('/', summary='Add tags')\nasync def add_tag(tag_data: STag, user: SUser = Depends(get_current_user)) -> List[STag]:\n    listener_tags = await TagsDAO(tag_data)\n    return listener_tags\n@tags.get('/my_listener_tags', summary='Get my listener tags')\nasync def get_my_listener_tags(user: SUser = Depends(get_current_user)) -> List[STag]:",
        "detail": "backend.src.tags.router",
        "documentation": {}
    },
    {
        "label": "STag",
        "kind": 6,
        "importPath": "backend.src.tags.schemas",
        "description": "backend.src.tags.schemas",
        "peekOfCode": "class STag(BaseModel):\n    name: str",
        "detail": "backend.src.tags.schemas",
        "documentation": {}
    },
    {
        "label": "ListenerTagsDAO",
        "kind": 6,
        "importPath": "backend.src.tags.services",
        "description": "backend.src.tags.services",
        "peekOfCode": "class ListenerTagsDAO(SQLAlchemyRepository):\n    model = listener_tags_association\nclass ProducerTagsDAO(SQLAlchemyRepository):\n    model = producer_tags_association\nclass ArtistTagsDAO(SQLAlchemyRepository):\n    model = artist_tags_association\nclass TagsDAO(SQLAlchemyRepository):\n    model = Tag",
        "detail": "backend.src.tags.services",
        "documentation": {}
    },
    {
        "label": "ProducerTagsDAO",
        "kind": 6,
        "importPath": "backend.src.tags.services",
        "description": "backend.src.tags.services",
        "peekOfCode": "class ProducerTagsDAO(SQLAlchemyRepository):\n    model = producer_tags_association\nclass ArtistTagsDAO(SQLAlchemyRepository):\n    model = artist_tags_association\nclass TagsDAO(SQLAlchemyRepository):\n    model = Tag",
        "detail": "backend.src.tags.services",
        "documentation": {}
    },
    {
        "label": "ArtistTagsDAO",
        "kind": 6,
        "importPath": "backend.src.tags.services",
        "description": "backend.src.tags.services",
        "peekOfCode": "class ArtistTagsDAO(SQLAlchemyRepository):\n    model = artist_tags_association\nclass TagsDAO(SQLAlchemyRepository):\n    model = Tag",
        "detail": "backend.src.tags.services",
        "documentation": {}
    },
    {
        "label": "TagsDAO",
        "kind": 6,
        "importPath": "backend.src.tags.services",
        "description": "backend.src.tags.services",
        "peekOfCode": "class TagsDAO(SQLAlchemyRepository):\n    model = Tag",
        "detail": "backend.src.tags.services",
        "documentation": {}
    },
    {
        "label": "Track",
        "kind": 6,
        "importPath": "backend.src.tracks.models",
        "description": "backend.src.tracks.models",
        "peekOfCode": "class Track(Base):\n    __tablename__ = \"tracks\"\n    name: Mapped[str] = mapped_column(nullable=False)\n    description: Mapped[str] = mapped_column(nullable=True)\n    picture_url: Mapped[str] = mapped_column(nullable=True)\n    file_url: Mapped[str] = mapped_column(nullable=False)\n    co_prod: Mapped[str] = mapped_column(nullable=True)\n    prod_by: Mapped[str] = mapped_column(nullable=True)\n    type: Mapped[str] = mapped_column(nullable=True)\n    user_id: Mapped[int] = mapped_column(ForeignKey(\"users.id\"))",
        "detail": "backend.src.tracks.models",
        "documentation": {}
    },
    {
        "label": "artist_profile_track_association",
        "kind": 5,
        "importPath": "backend.src.tracks.models",
        "description": "backend.src.tracks.models",
        "peekOfCode": "artist_profile_track_association = Table(\n    'artist_profile_track_association',\n    Base.metadata,\n    Column('artist_profile_id', Integer, ForeignKey('artist_profiles.id')),\n    Column('track_id', Integer, ForeignKey('tracks.id'))\n)\nclass Track(Base):\n    __tablename__ = \"tracks\"\n    name: Mapped[str] = mapped_column(nullable=False)\n    description: Mapped[str] = mapped_column(nullable=True)",
        "detail": "backend.src.tracks.models",
        "documentation": {}
    },
    {
        "label": "tracks",
        "kind": 5,
        "importPath": "backend.src.tracks.router",
        "description": "backend.src.tracks.router",
        "peekOfCode": "tracks = APIRouter(\n    prefix = \"/tracks\",\n    tags = [\"Tracks\"]\n)\n@tracks.get(\"/my\", summary=\"tracks by current user\")\nasync def get_user_tracks(user: SUser = Depends(get_current_user)):\n    response = await TracksRepository.find_all(user=user)\n    return response\n@tracks.get(\"/all\", summary=\"Get all tracks\")\nasync def all_tracks():",
        "detail": "backend.src.tracks.router",
        "documentation": {}
    },
    {
        "label": "STrackBase",
        "kind": 6,
        "importPath": "backend.src.tracks.schemas",
        "description": "backend.src.tracks.schemas",
        "peekOfCode": "class STrackBase(BaseModel):\n    title: str\n    picture: Optional[str]\n    description: Optional[str]\n    file_path: str\n    co_prod: Optional[str]\n    prod_by: Optional[str]\n    playlist_id: Optional[int]\n    user_id: int\n    Track_pack_id: Optional[int]",
        "detail": "backend.src.tracks.schemas",
        "documentation": {}
    },
    {
        "label": "STrackCreate",
        "kind": 6,
        "importPath": "backend.src.tracks.schemas",
        "description": "backend.src.tracks.schemas",
        "peekOfCode": "class STrackCreate(STrackBase):\n    pass\nclass STrack(STrackBase):\n    id: int\n    is_available: bool\n    created_at: datetime\n    class Config:\n        orm_mode = True",
        "detail": "backend.src.tracks.schemas",
        "documentation": {}
    },
    {
        "label": "STrack",
        "kind": 6,
        "importPath": "backend.src.tracks.schemas",
        "description": "backend.src.tracks.schemas",
        "peekOfCode": "class STrack(STrackBase):\n    id: int\n    is_available: bool\n    created_at: datetime\n    class Config:\n        orm_mode = True",
        "detail": "backend.src.tracks.schemas",
        "documentation": {}
    },
    {
        "label": "TracksRepository",
        "kind": 6,
        "importPath": "backend.src.tracks.services",
        "description": "backend.src.tracks.services",
        "peekOfCode": "class TracksRepository(SQLAlchemyRepository):\n    model = Track",
        "detail": "backend.src.tracks.services",
        "documentation": {}
    },
    {
        "label": "YandexCloudSettings",
        "kind": 6,
        "importPath": "backend.src.config",
        "description": "backend.src.config",
        "peekOfCode": "class YandexCloudSettings(BaseModel):\n    YANDEX_CLOUD_OAUTH_TOKEN: str = os.environ.get(\"YANDEX_CLOUD_OAUTH_TOKEN\")\n    YANDEX_CLOUD_ID: str = os.environ.get(\"YANDEX_CLOUD_ID\")\n    AWS_ACCESS_KEY_ID: str = os.environ.get(\"AWS_ACCESS_KEY_ID\")\n    AWS_SECRET_ACCESS_KEY: str = os.environ.get(\"AWS_SECRET_ACCESS_KEY\")\nclass SpotifySettings(BaseModel):\n    CLIENT_SECRET: str = os.environ.get(\"SPOTIFY_CLIENT_SECRET\")\n    CLIENT_ID: str = os.environ.get(\"SPOTIFY_CLIENT_ID\")\n    REDIRECT_URI: str = os.environ.get(\"REDIRECT_URI\")\nclass DbSettings(BaseModel):",
        "detail": "backend.src.config",
        "documentation": {}
    },
    {
        "label": "SpotifySettings",
        "kind": 6,
        "importPath": "backend.src.config",
        "description": "backend.src.config",
        "peekOfCode": "class SpotifySettings(BaseModel):\n    CLIENT_SECRET: str = os.environ.get(\"SPOTIFY_CLIENT_SECRET\")\n    CLIENT_ID: str = os.environ.get(\"SPOTIFY_CLIENT_ID\")\n    REDIRECT_URI: str = os.environ.get(\"REDIRECT_URI\")\nclass DbSettings(BaseModel):\n    DB_HOST: str = os.environ.get(\"DB_HOST\")\n    DB_PORT: int = int(os.environ.get(\"DB_PORT\"))\n    DB_NAME: str = os.environ.get(\"DB_NAME\")\n    DB_USER: str = os.environ.get(\"DB_USER\")\n    DB_PASS: str = os.environ.get(\"DB_PASS\")",
        "detail": "backend.src.config",
        "documentation": {}
    },
    {
        "label": "DbSettings",
        "kind": 6,
        "importPath": "backend.src.config",
        "description": "backend.src.config",
        "peekOfCode": "class DbSettings(BaseModel):\n    DB_HOST: str = os.environ.get(\"DB_HOST\")\n    DB_PORT: int = int(os.environ.get(\"DB_PORT\"))\n    DB_NAME: str = os.environ.get(\"DB_NAME\")\n    DB_USER: str = os.environ.get(\"DB_USER\")\n    DB_PASS: str = os.environ.get(\"DB_PASS\")\n    DB_HOST_TEST: str = os.environ.get(\"DB_HOST_TEST\")\n    DB_PORT_TEST: int = int(os.environ.get(\"DB_PORT_TEST\"))\n    DB_USER_TEST: str = os.environ.get(\"DB_USER_TEST\")\n    DB_NAME_TEST: str = os.environ.get(\"DB_NAME_TEST\")",
        "detail": "backend.src.config",
        "documentation": {}
    },
    {
        "label": "AuthSettings",
        "kind": 6,
        "importPath": "backend.src.config",
        "description": "backend.src.config",
        "peekOfCode": "class AuthSettings(BaseModel):\n    JWT_SECRET_KEY: str = os.environ.get(\"JWT_SECRET_KEY\")\n    JWT_REFRESH_SECRET_KEY: str = os.environ.get(\"JWT_REFRESH_SECRET_KEY\")\nclass Settings(BaseSettings):\n    api_v1_prefix: str = \"/api/v1\"\n    db: DbSettings = DbSettings()\n    auth: AuthSettings = AuthSettings()\n    spotify: SpotifySettings = SpotifySettings()\n    yandex_cloud: YandexCloudSettings = YandexCloudSettings()\nsettings = Settings()",
        "detail": "backend.src.config",
        "documentation": {}
    },
    {
        "label": "Settings",
        "kind": 6,
        "importPath": "backend.src.config",
        "description": "backend.src.config",
        "peekOfCode": "class Settings(BaseSettings):\n    api_v1_prefix: str = \"/api/v1\"\n    db: DbSettings = DbSettings()\n    auth: AuthSettings = AuthSettings()\n    spotify: SpotifySettings = SpotifySettings()\n    yandex_cloud: YandexCloudSettings = YandexCloudSettings()\nsettings = Settings()\nprint(settings.db.url)",
        "detail": "backend.src.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "kind": 5,
        "importPath": "backend.src.config",
        "description": "backend.src.config",
        "peekOfCode": "settings = Settings()\nprint(settings.db.url)",
        "detail": "backend.src.config",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 6,
        "importPath": "backend.src.database",
        "description": "backend.src.database",
        "peekOfCode": "class Base(DeclarativeBase):\n    __abstract__ = True\n    id: Mapped[int] = mapped_column(primary_key=True)\n    is_available: Mapped[bool] = mapped_column(nullable=False, default=True)\n    created_at: Mapped[datetime] = mapped_column(TIMESTAMP(timezone=True), server_default=func.now())\n    updated_at: Mapped[datetime] = mapped_column(TIMESTAMP(timezone=True), server_default=func.now(), onupdate=func.now())\nasync def get_async_session() -> AsyncGenerator[AsyncSession, None]:\n    async with async_session_maker() as session:\n        yield session",
        "detail": "backend.src.database",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "backend.src.database",
        "description": "backend.src.database",
        "peekOfCode": "engine = create_async_engine(\n    settings.db.url,\n    echo=True\n)\nasync_session_maker = sessionmaker(\n    engine, class_=AsyncSession, expire_on_commit=False\n)\nclass Base(DeclarativeBase):\n    __abstract__ = True\n    id: Mapped[int] = mapped_column(primary_key=True)",
        "detail": "backend.src.database",
        "documentation": {}
    },
    {
        "label": "async_session_maker",
        "kind": 5,
        "importPath": "backend.src.database",
        "description": "backend.src.database",
        "peekOfCode": "async_session_maker = sessionmaker(\n    engine, class_=AsyncSession, expire_on_commit=False\n)\nclass Base(DeclarativeBase):\n    __abstract__ = True\n    id: Mapped[int] = mapped_column(primary_key=True)\n    is_available: Mapped[bool] = mapped_column(nullable=False, default=True)\n    created_at: Mapped[datetime] = mapped_column(TIMESTAMP(timezone=True), server_default=func.now())\n    updated_at: Mapped[datetime] = mapped_column(TIMESTAMP(timezone=True), server_default=func.now(), onupdate=func.now())\nasync def get_async_session() -> AsyncGenerator[AsyncSession, None]:",
        "detail": "backend.src.database",
        "documentation": {}
    },
    {
        "label": "NotFoundException",
        "kind": 6,
        "importPath": "backend.src.exceptions",
        "description": "backend.src.exceptions",
        "peekOfCode": "class NotFoundException(HTTPException):\n    def __init__(self, detail: str = \"Not found\"):\n        super().__init__(status_code=status.HTTP_404_NOT_FOUND, detail=detail)\nclass UnauthorizedException(HTTPException):\n    def __init__(self, detail: str = \"Unauthorized\"):\n        super().__init__(status_code=status.HTTP_401_UNAUTHORIZED, detail=detail)\nclass NoRightsException(HTTPException):\n    def __init__(self, detail: str = \"No access rights\"):\n        super().__init__(status_code=status.HTTP_401_UNAUTHORIZED, detail=detail)\nclass CustomException(HTTPException):",
        "detail": "backend.src.exceptions",
        "documentation": {}
    },
    {
        "label": "UnauthorizedException",
        "kind": 6,
        "importPath": "backend.src.exceptions",
        "description": "backend.src.exceptions",
        "peekOfCode": "class UnauthorizedException(HTTPException):\n    def __init__(self, detail: str = \"Unauthorized\"):\n        super().__init__(status_code=status.HTTP_401_UNAUTHORIZED, detail=detail)\nclass NoRightsException(HTTPException):\n    def __init__(self, detail: str = \"No access rights\"):\n        super().__init__(status_code=status.HTTP_401_UNAUTHORIZED, detail=detail)\nclass CustomException(HTTPException):\n    def __init__(self, status_code: int, detail: str):\n        super().__init__(status_code=status_code, detail=detail)",
        "detail": "backend.src.exceptions",
        "documentation": {}
    },
    {
        "label": "NoRightsException",
        "kind": 6,
        "importPath": "backend.src.exceptions",
        "description": "backend.src.exceptions",
        "peekOfCode": "class NoRightsException(HTTPException):\n    def __init__(self, detail: str = \"No access rights\"):\n        super().__init__(status_code=status.HTTP_401_UNAUTHORIZED, detail=detail)\nclass CustomException(HTTPException):\n    def __init__(self, status_code: int, detail: str):\n        super().__init__(status_code=status_code, detail=detail)",
        "detail": "backend.src.exceptions",
        "documentation": {}
    },
    {
        "label": "CustomException",
        "kind": 6,
        "importPath": "backend.src.exceptions",
        "description": "backend.src.exceptions",
        "peekOfCode": "class CustomException(HTTPException):\n    def __init__(self, status_code: int, detail: str):\n        super().__init__(status_code=status_code, detail=detail)",
        "detail": "backend.src.exceptions",
        "documentation": {}
    },
    {
        "label": "BeatsAdmin",
        "kind": 6,
        "importPath": "backend.src.main",
        "description": "backend.src.main",
        "peekOfCode": "class BeatsAdmin(ModelView, model=Beat):\n    column_list = [Beat.id, Beat.title]\nclass UserAdmin(ModelView, model=User):\n    column_list = [User.id, User.username]\nclass SquadAdmin(ModelView, model=Squad):\n    column_list = [Squad.id, Squad.name]\nclass TagAdmin(ModelView, model=Tag):\n    column_list = [Tag.id, Tag.name]\nclass SoundkitAdmin(ModelView, model=Soundkit):\n    column_list = [Tag.id, Soundkit.name]",
        "detail": "backend.src.main",
        "documentation": {}
    },
    {
        "label": "UserAdmin",
        "kind": 6,
        "importPath": "backend.src.main",
        "description": "backend.src.main",
        "peekOfCode": "class UserAdmin(ModelView, model=User):\n    column_list = [User.id, User.username]\nclass SquadAdmin(ModelView, model=Squad):\n    column_list = [Squad.id, Squad.name]\nclass TagAdmin(ModelView, model=Tag):\n    column_list = [Tag.id, Tag.name]\nclass SoundkitAdmin(ModelView, model=Soundkit):\n    column_list = [Tag.id, Soundkit.name]\nclass ProducerProfileAdmin(ModelView, model=ProducerProfile):\n    column_list = [ProducerProfile.id, ProducerProfile.user]",
        "detail": "backend.src.main",
        "documentation": {}
    },
    {
        "label": "SquadAdmin",
        "kind": 6,
        "importPath": "backend.src.main",
        "description": "backend.src.main",
        "peekOfCode": "class SquadAdmin(ModelView, model=Squad):\n    column_list = [Squad.id, Squad.name]\nclass TagAdmin(ModelView, model=Tag):\n    column_list = [Tag.id, Tag.name]\nclass SoundkitAdmin(ModelView, model=Soundkit):\n    column_list = [Tag.id, Soundkit.name]\nclass ProducerProfileAdmin(ModelView, model=ProducerProfile):\n    column_list = [ProducerProfile.id, ProducerProfile.user]\nclass ArtistProfileAdmin(ModelView, model=ArtistProfile):\n    column_list = [ArtistProfile.id, ArtistProfile.user]",
        "detail": "backend.src.main",
        "documentation": {}
    },
    {
        "label": "TagAdmin",
        "kind": 6,
        "importPath": "backend.src.main",
        "description": "backend.src.main",
        "peekOfCode": "class TagAdmin(ModelView, model=Tag):\n    column_list = [Tag.id, Tag.name]\nclass SoundkitAdmin(ModelView, model=Soundkit):\n    column_list = [Tag.id, Soundkit.name]\nclass ProducerProfileAdmin(ModelView, model=ProducerProfile):\n    column_list = [ProducerProfile.id, ProducerProfile.user]\nclass ArtistProfileAdmin(ModelView, model=ArtistProfile):\n    column_list = [ArtistProfile.id, ArtistProfile.user]\nclass BeatpackAdmin(ModelView, model=Beatpack):\n    column_list = [Beatpack.id, Beatpack.title]",
        "detail": "backend.src.main",
        "documentation": {}
    },
    {
        "label": "SoundkitAdmin",
        "kind": 6,
        "importPath": "backend.src.main",
        "description": "backend.src.main",
        "peekOfCode": "class SoundkitAdmin(ModelView, model=Soundkit):\n    column_list = [Tag.id, Soundkit.name]\nclass ProducerProfileAdmin(ModelView, model=ProducerProfile):\n    column_list = [ProducerProfile.id, ProducerProfile.user]\nclass ArtistProfileAdmin(ModelView, model=ArtistProfile):\n    column_list = [ArtistProfile.id, ArtistProfile.user]\nclass BeatpackAdmin(ModelView, model=Beatpack):\n    column_list = [Beatpack.id, Beatpack.title]\nadmin.add_view(SoundkitAdmin)\nadmin.add_view(TagAdmin)",
        "detail": "backend.src.main",
        "documentation": {}
    },
    {
        "label": "ProducerProfileAdmin",
        "kind": 6,
        "importPath": "backend.src.main",
        "description": "backend.src.main",
        "peekOfCode": "class ProducerProfileAdmin(ModelView, model=ProducerProfile):\n    column_list = [ProducerProfile.id, ProducerProfile.user]\nclass ArtistProfileAdmin(ModelView, model=ArtistProfile):\n    column_list = [ArtistProfile.id, ArtistProfile.user]\nclass BeatpackAdmin(ModelView, model=Beatpack):\n    column_list = [Beatpack.id, Beatpack.title]\nadmin.add_view(SoundkitAdmin)\nadmin.add_view(TagAdmin)\nadmin.add_view(SquadAdmin)\nadmin.add_view(BeatsAdmin)",
        "detail": "backend.src.main",
        "documentation": {}
    },
    {
        "label": "ArtistProfileAdmin",
        "kind": 6,
        "importPath": "backend.src.main",
        "description": "backend.src.main",
        "peekOfCode": "class ArtistProfileAdmin(ModelView, model=ArtistProfile):\n    column_list = [ArtistProfile.id, ArtistProfile.user]\nclass BeatpackAdmin(ModelView, model=Beatpack):\n    column_list = [Beatpack.id, Beatpack.title]\nadmin.add_view(SoundkitAdmin)\nadmin.add_view(TagAdmin)\nadmin.add_view(SquadAdmin)\nadmin.add_view(BeatsAdmin)\nadmin.add_view(BeatpackAdmin)\nadmin.add_view(UserAdmin)",
        "detail": "backend.src.main",
        "documentation": {}
    },
    {
        "label": "BeatpackAdmin",
        "kind": 6,
        "importPath": "backend.src.main",
        "description": "backend.src.main",
        "peekOfCode": "class BeatpackAdmin(ModelView, model=Beatpack):\n    column_list = [Beatpack.id, Beatpack.title]\nadmin.add_view(SoundkitAdmin)\nadmin.add_view(TagAdmin)\nadmin.add_view(SquadAdmin)\nadmin.add_view(BeatsAdmin)\nadmin.add_view(BeatpackAdmin)\nadmin.add_view(UserAdmin)\nadmin.add_view(ProducerProfileAdmin)\nadmin.add_view(ArtistProfileAdmin)",
        "detail": "backend.src.main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "backend.src.main",
        "description": "backend.src.main",
        "peekOfCode": "app = FastAPI(\n    title = \"SeaMusic\",\n    description = \"High-perfomance musical application\",\n)\napp.include_router(auth)\napp.include_router(licenses)\napp.include_router(beats)\napp.include_router(beatpacks)\napp.include_router(tracks)\napp.include_router(albums)",
        "detail": "backend.src.main",
        "documentation": {}
    },
    {
        "label": "admin",
        "kind": 5,
        "importPath": "backend.src.main",
        "description": "backend.src.main",
        "peekOfCode": "admin = Admin(app, engine)\nclass BeatsAdmin(ModelView, model=Beat):\n    column_list = [Beat.id, Beat.title]\nclass UserAdmin(ModelView, model=User):\n    column_list = [User.id, User.username]\nclass SquadAdmin(ModelView, model=Squad):\n    column_list = [Squad.id, Squad.name]\nclass TagAdmin(ModelView, model=Tag):\n    column_list = [Tag.id, Tag.name]\nclass SoundkitAdmin(ModelView, model=Soundkit):",
        "detail": "backend.src.main",
        "documentation": {}
    },
    {
        "label": "origins",
        "kind": 5,
        "importPath": "backend.src.main",
        "description": "backend.src.main",
        "peekOfCode": "origins = [\n    \"http://127.0.0.1:5173\", \"http://localhost:5173\"\n]\napp.add_middleware(\n    CORSMiddleware,\n    allow_credentials=True,\n    allow_origins=origins,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)",
        "detail": "backend.src.main",
        "documentation": {}
    },
    {
        "label": "AbstractRepository",
        "kind": 6,
        "importPath": "backend.src.services",
        "description": "backend.src.services",
        "peekOfCode": "class AbstractRepository(ABC):\n    pass\nclass SQLAlchemyRepository(AbstractRepository):\n    model = None\n    @classmethod\n    async def add_one(cls, data: dict) -> int:\n        async with async_session_maker() as session:\n            stmt = insert(cls.model).values(**data).returning(cls.model)\n            result = await session.execute(stmt)\n            await session.commit()",
        "detail": "backend.src.services",
        "documentation": {}
    },
    {
        "label": "SQLAlchemyRepository",
        "kind": 6,
        "importPath": "backend.src.services",
        "description": "backend.src.services",
        "peekOfCode": "class SQLAlchemyRepository(AbstractRepository):\n    model = None\n    @classmethod\n    async def add_one(cls, data: dict) -> int:\n        async with async_session_maker() as session:\n            stmt = insert(cls.model).values(**data).returning(cls.model)\n            result = await session.execute(stmt)\n            await session.commit()\n            return result.scalar()\n    @classmethod",
        "detail": "backend.src.services",
        "documentation": {}
    },
    {
        "label": "MediaRepository",
        "kind": 6,
        "importPath": "backend.src.services",
        "description": "backend.src.services",
        "peekOfCode": "class MediaRepository(AbstractRepository):\n    session = boto3.Session(\n        aws_access_key_id=settings.yandex_cloud.AWS_ACCESS_KEY_ID, \n        aws_secret_access_key=settings.yandex_cloud.AWS_SECRET_ACCESS_KEY\n    )\n    s3 = session.client(\n        service_name='s3',\n        endpoint_url='https://storage.yandexcloud.net'\n    )\n    bucket_name = 'seamusic'",
        "detail": "backend.src.services",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 6,
        "importPath": "backend.tests.conftest",
        "description": "backend.tests.conftest",
        "peekOfCode": "class Base(DeclarativeBase):\n    __abstract__ = True\n    id: Mapped[int] = mapped_column(primary_key=True)\n    is_available: Mapped[bool] = mapped_column(nullable=False, default=False)\n    created_at: Mapped[datetime] = mapped_column(TIMESTAMP(timezone=True), server_default=func.now())\n    updated_at: Mapped[datetime] = mapped_column(TIMESTAMP(timezone=True), server_default=func.now(), onupdate=func.now())\nasync def override_get_async_session() -> AsyncGenerator[AsyncSession, None]:\n    async with async_session_maker() as session:\n        yield session\napp.dependency_overrides[get_async_session] = override_get_async_session",
        "detail": "backend.tests.conftest",
        "documentation": {}
    },
    {
        "label": "event_loop",
        "kind": 2,
        "importPath": "backend.tests.conftest",
        "description": "backend.tests.conftest",
        "peekOfCode": "def event_loop(request):\n    \"\"\"Create an instance of the default event loop for each test case.\"\"\"\n    loop = asyncio.get_event_loop_policy().new_event_loop()\n    yield loop\n    loop.close()\nclient = TestClient(app)\n@pytest.fixture(scope=\"session\")\nasync def ac() -> AsyncGenerator[AsyncClient, None]:\n    async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n        yield ac",
        "detail": "backend.tests.conftest",
        "documentation": {}
    },
    {
        "label": "DATABASE_URL_TEST",
        "kind": 5,
        "importPath": "backend.tests.conftest",
        "description": "backend.tests.conftest",
        "peekOfCode": "DATABASE_URL_TEST = f\"postgresql+asyncpg://{settings.db.DB_USER_TEST}:{settings.db.DB_PASS_TEST}@{settings.db.DB_HOST_TEST}:{settings.db.DB_PORT_TEST}/{settings.db.DB_NAME_TEST}\"\nengine_test = create_async_engine(\n    DATABASE_URL_TEST,\n    echo=True\n)\nasync_session_maker = sessionmaker(\n    engine_test, class_=AsyncSession, expire_on_commit=False\n)\nclass Base(DeclarativeBase):\n    __abstract__ = True",
        "detail": "backend.tests.conftest",
        "documentation": {}
    },
    {
        "label": "engine_test",
        "kind": 5,
        "importPath": "backend.tests.conftest",
        "description": "backend.tests.conftest",
        "peekOfCode": "engine_test = create_async_engine(\n    DATABASE_URL_TEST,\n    echo=True\n)\nasync_session_maker = sessionmaker(\n    engine_test, class_=AsyncSession, expire_on_commit=False\n)\nclass Base(DeclarativeBase):\n    __abstract__ = True\n    id: Mapped[int] = mapped_column(primary_key=True)",
        "detail": "backend.tests.conftest",
        "documentation": {}
    },
    {
        "label": "async_session_maker",
        "kind": 5,
        "importPath": "backend.tests.conftest",
        "description": "backend.tests.conftest",
        "peekOfCode": "async_session_maker = sessionmaker(\n    engine_test, class_=AsyncSession, expire_on_commit=False\n)\nclass Base(DeclarativeBase):\n    __abstract__ = True\n    id: Mapped[int] = mapped_column(primary_key=True)\n    is_available: Mapped[bool] = mapped_column(nullable=False, default=False)\n    created_at: Mapped[datetime] = mapped_column(TIMESTAMP(timezone=True), server_default=func.now())\n    updated_at: Mapped[datetime] = mapped_column(TIMESTAMP(timezone=True), server_default=func.now(), onupdate=func.now())\nasync def override_get_async_session() -> AsyncGenerator[AsyncSession, None]:",
        "detail": "backend.tests.conftest",
        "documentation": {}
    },
    {
        "label": "app.dependency_overrides[get_async_session]",
        "kind": 5,
        "importPath": "backend.tests.conftest",
        "description": "backend.tests.conftest",
        "peekOfCode": "app.dependency_overrides[get_async_session] = override_get_async_session\n@pytest.fixture(autouse=True, scope='session')\nasync def prepare_database():\n    async with engine_test.begin() as conn:\n        await conn.run_sync(Base.metadata.create_all)\n    yield\n    async with engine_test.begin() as conn:\n        await conn.run_sync(Base.metadata.drop_all)\n@pytest.fixture(scope='session')\ndef event_loop(request):",
        "detail": "backend.tests.conftest",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "backend.tests.conftest",
        "description": "backend.tests.conftest",
        "peekOfCode": "client = TestClient(app)\n@pytest.fixture(scope=\"session\")\nasync def ac() -> AsyncGenerator[AsyncClient, None]:\n    async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n        yield ac",
        "detail": "backend.tests.conftest",
        "documentation": {}
    },
    {
        "label": "test_register",
        "kind": 2,
        "importPath": "backend.tests.test_auth",
        "description": "backend.tests.test_auth",
        "peekOfCode": "def test_register():\n    response = client.post(\"/auth/register\", json={\n        \"username\": \"test_username\",\n        \"email\": \"test_email@test.test\",\n        \"birthday\": \"2024-06-30\",\n        \"password\": \"test_password\",\n        \"tags\": [\"supertrap, newjazz, rage, hyperpop\"],\n        \"role\": [\"listener\"]\n    })\n    assert response.status_code == 201",
        "detail": "backend.tests.test_auth",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "backend.venv.Scripts.jp",
        "description": "backend.venv.Scripts.jp",
        "peekOfCode": "def main():\n    parser = argparse.ArgumentParser()\n    parser.add_argument('expression')\n    parser.add_argument('-f', '--filename',\n                        help=('The filename containing the input data.  '\n                              'If a filename is not given then data is '\n                              'read from stdin.'))\n    parser.add_argument('--ast', action='store_true',\n                        help=('Pretty print the AST, do not search the data.'))\n    args = parser.parse_args()",
        "detail": "backend.venv.Scripts.jp",
        "documentation": {}
    }
]